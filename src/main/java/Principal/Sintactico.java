
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package Principal;

import java_cup.runtime.Symbol;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Sintactico extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public Sintactico() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Sintactico(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Sintactico(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\122\000\002\002\004\000\002\002\003\000\002\003" +
    "\004\000\002\003\003\000\002\004\004\000\002\004\006" +
    "\000\002\004\005\000\002\004\005\000\002\004\004\000" +
    "\002\004\006\000\002\004\005\000\002\004\005\000\002" +
    "\007\005\000\002\007\006\000\002\007\007\000\002\005" +
    "\004\000\002\005\005\000\002\010\006\000\002\010\007" +
    "\000\002\010\005\000\002\011\003\000\002\011\003\000" +
    "\002\011\004\000\002\011\004\000\002\015\007\000\002" +
    "\015\010\000\002\015\005\000\002\015\010\000\002\015" +
    "\011\000\002\015\006\000\002\027\004\000\002\027\004" +
    "\000\002\016\007\000\002\016\006\000\002\016\010\000" +
    "\002\016\007\000\002\014\003\000\002\014\003\000\002" +
    "\014\004\000\002\014\004\000\002\014\003\000\002\014" +
    "\003\000\002\014\003\000\002\006\004\000\002\006\006" +
    "\000\002\006\006\000\002\022\005\000\002\022\005\000" +
    "\002\022\005\000\002\026\004\000\002\026\004\000\002" +
    "\026\004\000\002\025\003\000\002\025\003\000\002\023" +
    "\003\000\002\023\003\000\002\023\003\000\002\023\003" +
    "\000\002\023\003\000\002\024\003\000\002\024\005\000" +
    "\002\024\005\000\002\021\003\000\002\021\003\000\002" +
    "\021\005\000\002\021\005\000\002\030\010\000\002\030" +
    "\007\000\002\031\003\000\002\031\005\000\002\032\010" +
    "\000\002\032\007\000\002\032\004\000\002\032\003\000" +
    "\002\033\012\000\002\033\007\000\002\033\011\000\002" +
    "\033\006\000\002\036\012\000\002\036\011\000\002\036" +
    "\010\000\002\036\007" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\221\000\004\004\007\001\002\000\004\002\223\001" +
    "\002\000\004\002\000\001\002\000\006\002\ufffe\004\007" +
    "\001\002\000\006\043\010\045\011\001\002\000\012\002" +
    "\ufffd\004\ufffd\005\014\006\015\001\002\000\012\002\ufff9" +
    "\004\ufff9\005\014\006\015\001\002\000\010\002\ufff7\004" +
    "\ufff7\006\015\001\002\000\006\002\ufff6\004\ufff6\001\002" +
    "\000\004\067\207\001\002\000\004\067\016\001\002\000" +
    "\004\035\017\001\002\000\012\002\uffee\004\uffee\045\020" +
    "\101\022\001\002\000\006\027\171\037\172\001\002\000" +
    "\014\002\uffed\004\uffed\006\uffed\045\020\101\022\001\002" +
    "\000\004\037\027\001\002\000\014\002\uffec\004\uffec\006" +
    "\uffec\045\020\101\022\001\002\000\010\002\ufff0\004\ufff0" +
    "\006\015\001\002\000\006\002\uffef\004\uffef\001\002\000" +
    "\010\002\uffea\004\uffea\006\uffea\001\002\000\004\027\030" +
    "\001\002\000\006\030\031\045\032\001\002\000\032\002" +
    "\uffe0\004\uffe0\006\uffe0\007\041\012\042\013\036\021\037" +
    "\025\046\037\040\043\051\045\uffe0\101\uffe0\001\002\000" +
    "\004\037\162\001\002\000\004\030\034\001\002\000\032" +
    "\002\uffe1\004\uffe1\006\uffe1\007\041\012\042\013\036\021" +
    "\037\025\046\037\040\043\051\045\uffe1\101\uffe1\001\002" +
    "\000\014\002\uffdf\004\uffdf\006\uffdf\045\uffdf\101\uffdf\001" +
    "\002\000\010\037\100\073\121\102\063\001\002\000\004" +
    "\045\032\001\002\000\006\032\130\074\150\001\002\000" +
    "\006\037\066\102\063\001\002\000\004\037\106\001\002" +
    "\000\022\002\uffd7\004\uffd7\006\uffd7\011\uffd7\014\uffd7\022" +
    "\uffd7\045\uffd7\101\uffd7\001\002\000\040\002\uffdd\004\uffdd" +
    "\006\uffdd\007\041\011\uffdd\012\042\013\036\014\uffdd\021" +
    "\037\022\uffdd\025\046\037\040\043\051\045\uffdd\101\uffdd" +
    "\001\002\000\040\002\uffdc\004\uffdc\006\uffdc\007\041\011" +
    "\uffdc\012\042\013\036\014\uffdc\021\037\022\uffdc\025\046" +
    "\037\040\043\051\045\uffdc\101\uffdc\001\002\000\020\007" +
    "\041\012\042\013\036\021\037\025\046\037\040\043\051" +
    "\001\002\000\022\002\uffd8\004\uffd8\006\uffd8\011\uffd8\014" +
    "\uffd8\022\uffd8\045\uffd8\101\uffd8\001\002\000\022\002\uffd9" +
    "\004\uffd9\006\uffd9\011\uffd9\014\uffd9\022\uffd9\045\uffd9\101" +
    "\uffd9\001\002\000\004\037\052\001\002\000\004\032\053" +
    "\001\002\000\004\105\054\001\002\000\004\043\055\001" +
    "\002\000\004\027\056\001\002\000\004\030\057\001\002" +
    "\000\040\002\uffb2\004\uffb2\006\uffb2\007\041\011\uffb2\012" +
    "\042\013\036\014\uffb2\021\037\022\uffb2\025\046\037\040" +
    "\043\051\045\uffb2\101\uffb2\001\002\000\022\002\uffb3\004" +
    "\uffb3\006\uffb3\011\uffb3\014\uffb3\022\uffb3\045\uffb3\101\uffb3" +
    "\001\002\000\004\022\062\001\002\000\006\037\066\102" +
    "\063\001\002\000\060\002\uffc2\004\uffc2\006\uffc2\007\uffc2" +
    "\010\uffc2\011\uffc2\012\uffc2\013\uffc2\014\uffc2\021\uffc2\022" +
    "\uffc2\025\uffc2\030\uffc2\037\uffc2\043\uffc2\045\uffc2\047\074" +
    "\050\067\051\070\052\075\054\072\061\uffc2\101\uffc2\001" +
    "\002\000\040\002\uffb4\004\uffb4\006\uffb4\007\041\011\uffb4" +
    "\012\042\013\036\014\uffb4\021\037\022\uffb4\025\046\037" +
    "\040\043\051\045\uffb4\101\uffb4\001\002\000\044\002\uffbd" +
    "\004\uffbd\006\uffbd\007\uffbd\010\uffbd\011\uffbd\012\uffbd\013" +
    "\uffbd\014\uffbd\021\uffbd\022\uffbd\025\uffbd\037\uffbd\043\uffbd" +
    "\045\uffbd\061\uffbd\101\uffbd\001\002\000\060\002\uffc3\004" +
    "\uffc3\006\uffc3\007\uffc3\010\uffc3\011\uffc3\012\uffc3\013\uffc3" +
    "\014\uffc3\021\uffc3\022\uffc3\025\uffc3\037\uffc3\043\uffc3\045" +
    "\uffc3\047\074\050\067\051\070\052\075\054\072\061\uffc3" +
    "\074\073\101\uffc3\001\002\000\006\037\uffca\102\uffca\001" +
    "\002\000\006\037\uffc9\102\uffc9\001\002\000\006\037\100" +
    "\102\063\001\002\000\006\037\uffc7\102\uffc7\001\002\000" +
    "\004\102\076\001\002\000\006\037\uffcb\102\uffcb\001\002" +
    "\000\006\037\uffc8\102\uffc8\001\002\000\044\002\uffbc\004" +
    "\uffbc\006\uffbc\007\uffbc\010\uffbc\011\uffbc\012\uffbc\013\uffbc" +
    "\014\uffbc\021\uffbc\022\uffbc\025\uffbc\037\uffbc\043\uffbc\045" +
    "\uffbc\061\uffbc\101\uffbc\001\002\000\046\002\uffc1\004\uffc1" +
    "\006\uffc1\007\uffc1\010\uffc1\011\uffc1\012\uffc1\013\uffc1\014" +
    "\uffc1\021\uffc1\022\uffc1\025\uffc1\030\uffc1\037\uffc1\043\uffc1" +
    "\045\uffc1\061\uffc1\101\uffc1\001\002\000\060\002\uffc3\004" +
    "\uffc3\006\uffc3\007\uffc3\010\uffc3\011\uffc3\012\uffc3\013\uffc3" +
    "\014\uffc3\021\uffc3\022\uffc3\025\uffc3\030\uffc3\037\uffc3\043" +
    "\uffc3\045\uffc3\047\074\050\067\051\070\052\075\054\072" +
    "\061\uffc3\101\uffc3\001\002\000\022\002\uffb6\004\uffb6\006" +
    "\uffb6\011\uffb6\014\uffb6\022\uffb6\045\uffb6\101\uffb6\001\002" +
    "\000\006\037\100\102\063\001\002\000\046\002\uffc0\004" +
    "\uffc0\006\uffc0\007\uffc0\010\uffc0\011\uffc0\012\uffc0\013\uffc0" +
    "\014\uffc0\021\uffc0\022\uffc0\025\uffc0\030\uffc0\037\uffc0\043" +
    "\uffc0\045\uffc0\061\uffc0\101\uffc0\001\002\000\022\002\uffdb" +
    "\004\uffdb\006\uffdb\011\uffdb\014\uffdb\022\uffdb\045\uffdb\101" +
    "\uffdb\001\002\000\022\002\uffda\004\uffda\006\uffda\011\uffda" +
    "\014\uffda\022\uffda\045\uffda\101\uffda\001\002\000\040\002" +
    "\uffce\004\uffce\006\uffce\007\uffce\011\uffce\012\uffce\013\uffce" +
    "\014\uffce\021\uffce\022\uffce\025\uffce\037\uffce\043\uffce\045" +
    "\uffce\101\uffce\001\002\000\004\010\110\001\002\000\020" +
    "\007\041\012\042\013\036\021\037\025\046\037\040\043" +
    "\051\001\002\000\006\011\113\014\114\001\002\000\022" +
    "\002\uffbe\004\uffbe\006\uffbe\011\uffbe\014\uffbe\022\uffbe\045" +
    "\uffbe\101\uffbe\001\002\000\042\002\uffb8\004\uffb8\006\uffb8" +
    "\007\041\011\uffb8\012\042\013\036\014\uffb8\021\037\022" +
    "\uffb8\025\046\037\127\043\051\045\uffb8\101\uffb8\102\063" +
    "\001\002\000\010\037\100\073\121\102\063\001\002\000" +
    "\004\011\113\001\002\000\022\002\uffbf\004\uffbf\006\uffbf" +
    "\011\uffbf\014\uffbf\022\uffbf\045\uffbf\101\uffbf\001\002\000" +
    "\016\002\uffe3\004\uffe3\006\uffe3\011\uffe3\045\uffe3\101\uffe3" +
    "\001\002\000\016\002\uffe2\004\uffe2\006\uffe2\011\uffe2\045" +
    "\uffe2\101\uffe2\001\002\000\042\002\uffc6\004\uffc6\006\uffc6" +
    "\007\uffc6\011\uffc6\012\uffc6\013\uffc6\014\uffc6\021\uffc6\022" +
    "\uffc6\025\uffc6\031\122\037\uffc6\043\uffc6\045\uffc6\101\uffc6" +
    "\001\002\000\010\037\100\073\121\102\063\001\002\000" +
    "\040\002\uffc4\004\uffc4\006\uffc4\007\uffc4\011\uffc4\012\uffc4" +
    "\013\uffc4\014\uffc4\021\uffc4\022\uffc4\025\uffc4\037\uffc4\043" +
    "\uffc4\045\uffc4\101\uffc4\001\002\000\040\002\uffc5\004\uffc5" +
    "\006\uffc5\007\uffc5\011\uffc5\012\uffc5\013\uffc5\014\uffc5\021" +
    "\uffc5\022\uffc5\025\uffc5\037\uffc5\043\uffc5\045\uffc5\101\uffc5" +
    "\001\002\000\022\002\uffb9\004\uffb9\006\uffb9\011\uffb9\014" +
    "\uffb9\022\uffb9\045\uffb9\101\uffb9\001\002\000\004\010\143" +
    "\001\002\000\022\010\uffc3\032\130\047\074\050\067\051" +
    "\070\052\075\054\072\074\131\001\002\000\014\037\100" +
    "\073\121\102\063\103\141\104\140\001\002\000\006\037" +
    "\132\102\076\001\002\000\004\027\133\001\002\000\004" +
    "\030\134\001\002\000\040\002\uffb0\004\uffb0\006\uffb0\007" +
    "\041\011\uffb0\012\042\013\036\014\uffb0\021\037\022\uffb0" +
    "\025\046\037\040\043\051\045\uffb0\101\uffb0\001\002\000" +
    "\022\002\uffb1\004\uffb1\006\uffb1\011\uffb1\014\uffb1\022\uffb1" +
    "\045\uffb1\101\uffb1\001\002\000\040\002\uffd1\004\uffd1\006" +
    "\uffd1\007\uffd1\011\uffd1\012\uffd1\013\uffd1\014\uffd1\021\uffd1" +
    "\022\uffd1\025\uffd1\037\uffd1\043\uffd1\045\uffd1\101\uffd1\001" +
    "\002\000\040\002\uffd3\004\uffd3\006\uffd3\007\uffd3\011\uffd3" +
    "\012\uffd3\013\uffd3\014\uffd3\021\uffd3\022\uffd3\025\uffd3\037" +
    "\uffd3\043\uffd3\045\uffd3\101\uffd3\001\002\000\040\002\uffcc" +
    "\004\uffcc\006\uffcc\007\uffcc\011\uffcc\012\uffcc\013\uffcc\014" +
    "\uffcc\021\uffcc\022\uffcc\025\uffcc\037\uffcc\043\uffcc\045\uffcc" +
    "\101\uffcc\001\002\000\040\002\uffcd\004\uffcd\006\uffcd\007" +
    "\uffcd\011\uffcd\012\uffcd\013\uffcd\014\uffcd\021\uffcd\022\uffcd" +
    "\025\uffcd\037\uffcd\043\uffcd\045\uffcd\101\uffcd\001\002\000" +
    "\040\002\uffd2\004\uffd2\006\uffd2\007\uffd2\011\uffd2\012\uffd2" +
    "\013\uffd2\014\uffd2\021\uffd2\022\uffd2\025\uffd2\037\uffd2\043" +
    "\uffd2\045\uffd2\101\uffd2\001\002\000\020\007\041\012\042" +
    "\013\036\021\037\025\046\037\040\043\051\001\002\000" +
    "\006\011\113\014\114\001\002\000\022\002\uffba\004\uffba" +
    "\006\uffba\011\uffba\014\uffba\022\uffba\045\uffba\101\uffba\001" +
    "\002\000\004\011\113\001\002\000\022\002\uffbb\004\uffbb" +
    "\006\uffbb\011\uffbb\014\uffbb\022\uffbb\045\uffbb\101\uffbb\001" +
    "\002\000\004\037\132\001\002\000\004\022\152\001\002" +
    "\000\006\037\066\102\063\001\002\000\004\061\154\001" +
    "\002\000\004\102\155\001\002\000\004\025\156\001\002" +
    "\000\040\002\uffb5\004\uffb5\006\uffb5\007\041\011\uffb5\012" +
    "\042\013\036\014\uffb5\021\037\022\uffb5\025\046\037\040" +
    "\043\051\045\uffb5\101\uffb5\001\002\000\022\002\uffb7\004" +
    "\uffb7\006\uffb7\011\uffb7\014\uffb7\022\uffb7\045\uffb7\101\uffb7" +
    "\001\002\000\040\002\uffd0\004\uffd0\006\uffd0\007\uffd0\011" +
    "\uffd0\012\uffd0\013\uffd0\014\uffd0\021\uffd0\022\uffd0\025\uffd0" +
    "\037\uffd0\043\uffd0\045\uffd0\101\uffd0\001\002\000\040\002" +
    "\uffcf\004\uffcf\006\uffcf\007\uffcf\011\uffcf\012\uffcf\013\uffcf" +
    "\014\uffcf\021\uffcf\022\uffcf\025\uffcf\037\uffcf\043\uffcf\045" +
    "\uffcf\101\uffcf\001\002\000\012\022\uffd6\030\uffd6\031\163" +
    "\032\164\001\002\000\004\045\032\001\002\000\006\037" +
    "\100\102\063\001\002\000\006\022\uffd4\030\uffd4\001\002" +
    "\000\006\022\uffd5\030\uffd5\001\002\000\014\002\uffde\004" +
    "\uffde\006\uffde\045\uffde\101\uffde\001\002\000\010\002\uffeb" +
    "\004\uffeb\006\uffeb\001\002\000\004\030\205\001\002\000" +
    "\004\027\173\001\002\000\006\030\174\045\032\001\002" +
    "\000\022\007\041\012\042\013\036\014\114\021\037\025" +
    "\046\037\040\043\051\001\002\000\004\030\176\001\002" +
    "\000\022\007\041\012\042\013\036\014\114\021\037\025" +
    "\046\037\040\043\051\001\002\000\004\014\114\001\002" +
    "\000\014\002\uffe8\004\uffe8\006\uffe8\045\uffe8\101\uffe8\001" +
    "\002\000\014\002\uffe5\004\uffe5\006\uffe5\045\uffe5\101\uffe5" +
    "\001\002\000\004\014\114\001\002\000\014\002\uffe9\004" +
    "\uffe9\006\uffe9\045\uffe9\101\uffe9\001\002\000\014\002\uffe6" +
    "\004\uffe6\006\uffe6\045\uffe6\101\uffe6\001\002\000\032\002" +
    "\uffe7\004\uffe7\006\uffe7\007\041\012\042\013\036\021\037" +
    "\025\046\037\040\043\051\045\uffe7\101\uffe7\001\002\000" +
    "\014\002\uffe4\004\uffe4\006\uffe4\045\uffe4\101\uffe4\001\002" +
    "\000\004\035\210\001\002\000\012\002\ufff5\004\ufff5\006" +
    "\ufff5\045\212\001\002\000\012\002\ufff4\004\ufff4\005\014" +
    "\006\ufff4\001\002\000\004\037\213\001\002\000\014\002" +
    "\ufff2\004\ufff2\005\ufff2\006\ufff2\045\212\001\002\000\012" +
    "\002\ufff1\004\ufff1\005\ufff1\006\ufff1\001\002\000\010\002" +
    "\ufff3\004\ufff3\006\ufff3\001\002\000\006\002\ufff8\004\ufff8" +
    "\001\002\000\010\002\ufffb\004\ufffb\006\015\001\002\000" +
    "\006\002\ufffa\004\ufffa\001\002\000\006\002\ufffc\004\ufffc" +
    "\001\002\000\004\002\uffff\001\002\000\004\002\001\001" +
    "\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\221\000\010\002\003\003\004\004\005\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\003\221\004\005" +
    "\001\001\000\002\001\001\000\006\007\216\010\217\001" +
    "\001\000\006\007\011\010\012\001\001\000\004\010\215" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\011\023\015\020\016\022" +
    "\001\001\000\002\001\001\000\010\011\167\015\020\016" +
    "\022\001\001\000\002\001\001\000\010\011\025\015\020" +
    "\016\022\001\001\000\004\010\024\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\006\032" +
    "\001\001\000\016\014\166\022\043\026\044\030\047\033" +
    "\046\036\042\001\001\000\002\001\001\000\002\001\001" +
    "\000\016\014\034\022\043\026\044\030\047\033\046\036" +
    "\042\001\001\000\002\001\001\000\006\021\157\024\160" +
    "\001\001\000\004\006\150\001\001\000\002\001\001\000" +
    "\006\021\064\031\106\001\001\000\002\001\001\000\002" +
    "\001\001\000\016\014\104\022\043\026\044\030\047\033" +
    "\046\036\042\001\001\000\016\014\103\022\043\026\044" +
    "\030\047\033\046\036\042\001\001\000\016\014\060\022" +
    "\043\026\044\030\047\033\046\036\042\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\016\014\057\022\043\026\044\030" +
    "\047\033\046\036\042\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\021\064\031\063\001\001\000\004\023" +
    "\101\001\001\000\016\014\100\022\043\026\044\030\047" +
    "\033\046\036\042\001\001\000\002\001\001\000\004\023" +
    "\070\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\021\076\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\023\070\001\001\000\002\001\001\000" +
    "\004\021\102\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\016\014\110\022\043\026\044\030\047\033\046\036\042" +
    "\001\001\000\006\027\114\032\111\001\001\000\002\001" +
    "\001\000\022\014\124\021\064\022\043\026\044\030\047" +
    "\031\125\033\046\036\042\001\001\000\006\021\116\024" +
    "\117\001\001\000\004\032\115\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\021\122\024\123\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\023" +
    "\070\001\001\000\010\021\136\024\141\025\135\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\016\014\134\022\043\026\044\030\047\033\046\036\042" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\016\014\143\022\043\026\044\030\047\033\046\036" +
    "\042\001\001\000\006\027\145\032\144\001\001\000\002" +
    "\001\001\000\004\032\146\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\021\064\031\152" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\016\014\156\022\043\026\044\030\047\033\046" +
    "\036\042\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\006\165\001\001" +
    "\000\004\021\164\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\006\174\001\001\000\020\014" +
    "\201\022\043\026\044\027\202\030\047\033\046\036\042" +
    "\001\001\000\002\001\001\000\020\014\176\022\043\026" +
    "\044\027\177\030\047\033\046\036\042\001\001\000\004" +
    "\027\200\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\027\203\001\001\000\002\001\001\000\002\001\001" +
    "\000\016\014\205\022\043\026\044\030\047\033\046\036" +
    "\042\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\005\210\001\001\000\004\007\214\001\001\000\002\001" +
    "\001\000\004\005\213\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\010\220\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Sintactico$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Sintactico$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Sintactico$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Sintactico$actions {
  private final Sintactico parser;

  /** Constructor */
  CUP$Sintactico$actions(Sintactico parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Sintactico$do_action_part00000000(
    int                        CUP$Sintactico$act_num,
    java_cup.runtime.lr_parser CUP$Sintactico$parser,
    java.util.Stack            CUP$Sintactico$stack,
    int                        CUP$Sintactico$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Sintactico$result;

      /* select the action based on the action number */
      switch (CUP$Sintactico$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= S EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		RESULT = start_val;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Sintactico$parser.done_parsing();
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // S ::= CLASE_GENERAL 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("S",0, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // CLASE_GENERAL ::= CLASE_PARTICULAR CLASE_GENERAL 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CLASE_GENERAL",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // CLASE_GENERAL ::= CLASE_PARTICULAR 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CLASE_GENERAL",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // CLASE_PARTICULAR ::= CLASE VARIABLE_CLASE 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CLASE_PARTICULAR",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // CLASE_PARTICULAR ::= CLASE VARIABLE_CLASE PROPIEDAD_CLASE METODO_CLASE 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CLASE_PARTICULAR",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // CLASE_PARTICULAR ::= CLASE VARIABLE_CLASE PROPIEDAD_CLASE 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CLASE_PARTICULAR",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // CLASE_PARTICULAR ::= CLASE VARIABLE_CLASE METODO_CLASE 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CLASE_PARTICULAR",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // CLASE_PARTICULAR ::= CLASE TIPO_DATO 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CLASE_PARTICULAR",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // CLASE_PARTICULAR ::= CLASE TIPO_DATO PROPIEDAD_CLASE METODO_CLASE 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CLASE_PARTICULAR",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // CLASE_PARTICULAR ::= CLASE TIPO_DATO PROPIEDAD_CLASE 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CLASE_PARTICULAR",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // CLASE_PARTICULAR ::= CLASE TIPO_DATO METODO_CLASE 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CLASE_PARTICULAR",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // PROPIEDAD_CLASE ::= PROPIEDADES TIPO_DE_METODOS DOS_PUNTOS 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("PROPIEDAD_CLASE",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // PROPIEDAD_CLASE ::= PROPIEDADES TIPO_DE_METODOS DOS_PUNTOS VARIABLES_PROPIEDADES 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("PROPIEDAD_CLASE",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // PROPIEDAD_CLASE ::= PROPIEDADES TIPO_DE_METODOS DOS_PUNTOS VARIABLES_PROPIEDADES PROPIEDAD_CLASE 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("PROPIEDAD_CLASE",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // VARIABLES_PROPIEDADES ::= TIPO_DATO VARIABLE 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("VARIABLES_PROPIEDADES",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // VARIABLES_PROPIEDADES ::= TIPO_DATO VARIABLE VARIABLES_PROPIEDADES 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("VARIABLES_PROPIEDADES",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // METODO_CLASE ::= METODOS TIPO_DE_METODOS DOS_PUNTOS METODOS_PARTICULAR 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("METODO_CLASE",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // METODO_CLASE ::= METODOS TIPO_DE_METODOS DOS_PUNTOS METODOS_PARTICULAR METODO_CLASE 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("METODO_CLASE",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // METODO_CLASE ::= METODOS TIPO_DE_METODOS DOS_PUNTOS 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("METODO_CLASE",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // METODOS_PARTICULAR ::= METODO_RETORNO 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("METODOS_PARTICULAR",7, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // METODOS_PARTICULAR ::= METODO_EJECUTAR 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("METODOS_PARTICULAR",7, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // METODOS_PARTICULAR ::= METODO_RETORNO METODOS_PARTICULAR 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("METODOS_PARTICULAR",7, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // METODOS_PARTICULAR ::= METODO_EJECUTAR METODOS_PARTICULAR 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("METODOS_PARTICULAR",7, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // METODO_RETORNO ::= TIPO_DATO VARIABLE PARENTESIS1 PARENTESIS2 DEVOLVER_METODO 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("METODO_RETORNO",11, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // METODO_RETORNO ::= TIPO_DATO VARIABLE PARENTESIS1 VARIABLES_PROPIEDADES2 PARENTESIS2 DEVOLVER_METODO 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("METODO_RETORNO",11, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // METODO_RETORNO ::= TIPO_DATO PARENTESIS1 PARENTESIS2 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("METODO_RETORNO",11, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // METODO_RETORNO ::= TIPO_DATO VARIABLE PARENTESIS1 PARENTESIS2 CODIGO_GENERAL DEVOLVER_METODO 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("METODO_RETORNO",11, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // METODO_RETORNO ::= TIPO_DATO VARIABLE PARENTESIS1 VARIABLES_PROPIEDADES2 PARENTESIS2 CODIGO_GENERAL DEVOLVER_METODO 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("METODO_RETORNO",11, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // METODO_RETORNO ::= TIPO_DATO PARENTESIS1 PARENTESIS2 CODIGO_GENERAL 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("METODO_RETORNO",11, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // DEVOLVER_METODO ::= DEVOLVER OPERACION 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DEVOLVER_METODO",21, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // DEVOLVER_METODO ::= DEVOLVER CONCATENACION 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DEVOLVER_METODO",21, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // METODO_EJECUTAR ::= EJECUTAR VARIABLE PARENTESIS1 VARIABLES_PROPIEDADES2 PARENTESIS2 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("METODO_EJECUTAR",12, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // METODO_EJECUTAR ::= EJECUTAR VARIABLE PARENTESIS1 PARENTESIS2 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("METODO_EJECUTAR",12, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // METODO_EJECUTAR ::= EJECUTAR VARIABLE PARENTESIS1 VARIABLES_PROPIEDADES2 PARENTESIS2 CODIGO_GENERAL 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("METODO_EJECUTAR",12, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // METODO_EJECUTAR ::= EJECUTAR VARIABLE PARENTESIS1 PARENTESIS2 CODIGO_GENERAL 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("METODO_EJECUTAR",12, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // CODIGO_GENERAL ::= ASIGNACION 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CODIGO_GENERAL",10, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // CODIGO_GENERAL ::= LEER_ESCRIBIR 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CODIGO_GENERAL",10, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // CODIGO_GENERAL ::= LEER_ESCRIBIR CODIGO_GENERAL 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CODIGO_GENERAL",10, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // CODIGO_GENERAL ::= ASIGNACION CODIGO_GENERAL 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CODIGO_GENERAL",10, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // CODIGO_GENERAL ::= CONDICION 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CODIGO_GENERAL",10, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // CODIGO_GENERAL ::= CICLO_FOR 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CODIGO_GENERAL",10, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // CODIGO_GENERAL ::= INSTANCIAR_CLASE 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CODIGO_GENERAL",10, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // VARIABLES_PROPIEDADES2 ::= TIPO_DATO VARIABLE 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("VARIABLES_PROPIEDADES2",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // VARIABLES_PROPIEDADES2 ::= TIPO_DATO VARIABLE COMA VARIABLES_PROPIEDADES2 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("VARIABLES_PROPIEDADES2",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // VARIABLES_PROPIEDADES2 ::= TIPO_DATO VARIABLE IGUAL OPERACION 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("VARIABLES_PROPIEDADES2",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // ASIGNACION ::= VARIABLE IGUAL OPERACION 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ASIGNACION",16, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // ASIGNACION ::= VARIABLE IGUAL CONCATENACION 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ASIGNACION",16, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // ASIGNACION ::= VARIABLE IGUAL LOGICO 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ASIGNACION",16, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // LEER_ESCRIBIR ::= ESCRIBIR OPERACION 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("LEER_ESCRIBIR",20, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // LEER_ESCRIBIR ::= ESCRIBIR CONCATENACION 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("LEER_ESCRIBIR",20, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // LEER_ESCRIBIR ::= LEER VARIABLE 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("LEER_ESCRIBIR",20, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // LOGICO ::= VERDADERO 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("LOGICO",19, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // LOGICO ::= FALSO 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("LOGICO",19, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // SIGNO_MATE ::= SUMA 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SIGNO_MATE",17, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // SIGNO_MATE ::= RESTA 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SIGNO_MATE",17, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // SIGNO_MATE ::= MULTIPLICACION 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SIGNO_MATE",17, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // SIGNO_MATE ::= DIVISION 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SIGNO_MATE",17, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // SIGNO_MATE ::= MODULO 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SIGNO_MATE",17, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // CONCATENACION ::= CADENA 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CONCATENACION",18, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // CONCATENACION ::= CADENA COMA CONCATENACION 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CONCATENACION",18, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // CONCATENACION ::= CADENA COMA OPERACION 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CONCATENACION",18, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // OPERACION ::= VARIABLE 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("OPERACION",15, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // OPERACION ::= NUMERO_DECIMAL 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("OPERACION",15, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // OPERACION ::= VARIABLE SIGNO_MATE OPERACION 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("OPERACION",15, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // OPERACION ::= NUMERO_DECIMAL SIGNO_MATE OPERACION 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("OPERACION",15, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // CONDICION ::= IF CODIGO_CONDICION ENTONCES CODIGO_GENERAL DEVOLVER_METODO SINO_GENERAL 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CONDICION",22, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // CONDICION ::= IF CODIGO_CONDICION ENTONCES CODIGO_GENERAL SINO_GENERAL 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CONDICION",22, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // CODIGO_CONDICION ::= OPERACION 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CODIGO_CONDICION",23, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // CODIGO_CONDICION ::= VARIABLE SIGNOS NUMERO_DECIMAL 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CODIGO_CONDICION",23, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // SINO_GENERAL ::= SINO CODIGO_CONDICION ENTONCES CODIGO_GENERAL DEVOLVER_METODO SINO_GENERAL 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SINO_GENERAL",24, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // SINO_GENERAL ::= SINO CODIGO_CONDICION ENTONCES CODIGO_GENERAL SINO_GENERAL 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SINO_GENERAL",24, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // SINO_GENERAL ::= SINO CODIGO_GENERAL 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SINO_GENERAL",24, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // SINO_GENERAL ::= SINO 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SINO_GENERAL",24, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // CICLO_FOR ::= DESDE VARIABLES_PROPIEDADES2 MIENTRAS CODIGO_CONDICION INCREMENTAR NUMERO_DECIMAL HACER CODIGO_GENERAL 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CICLO_FOR",25, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // CICLO_FOR ::= HACER CODIGO_GENERAL MIENTRAS CODIGO_CONDICION CODIGO_GENERAL 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CICLO_FOR",25, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // CICLO_FOR ::= DESDE VARIABLES_PROPIEDADES2 MIENTRAS CODIGO_CONDICION INCREMENTAR NUMERO_DECIMAL HACER 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CICLO_FOR",25, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // CICLO_FOR ::= HACER CODIGO_GENERAL MIENTRAS CODIGO_CONDICION 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CICLO_FOR",25, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // INSTANCIAR_CLASE ::= VARIABLE_CLASE VARIABLE IGUAL NEW VARIABLE_CLASE PARENTESIS1 PARENTESIS2 CODIGO_GENERAL 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("INSTANCIAR_CLASE",28, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // INSTANCIAR_CLASE ::= VARIABLE_CLASE VARIABLE IGUAL NEW VARIABLE_CLASE PARENTESIS1 PARENTESIS2 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("INSTANCIAR_CLASE",28, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // INSTANCIAR_CLASE ::= VARIABLE SIGNOS VARIABLE PARENTESIS1 PARENTESIS2 CODIGO_GENERAL 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("INSTANCIAR_CLASE",28, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // INSTANCIAR_CLASE ::= VARIABLE SIGNOS VARIABLE PARENTESIS1 PARENTESIS2 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("INSTANCIAR_CLASE",28, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Sintactico$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Sintactico$do_action(
    int                        CUP$Sintactico$act_num,
    java_cup.runtime.lr_parser CUP$Sintactico$parser,
    java.util.Stack            CUP$Sintactico$stack,
    int                        CUP$Sintactico$top)
    throws java.lang.Exception
    {
              return CUP$Sintactico$do_action_part00000000(
                               CUP$Sintactico$act_num,
                               CUP$Sintactico$parser,
                               CUP$Sintactico$stack,
                               CUP$Sintactico$top);
    }
}

}

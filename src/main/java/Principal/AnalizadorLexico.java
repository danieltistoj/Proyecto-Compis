// DO NOT EDIT
// Generated by JFlex 1.8.2 http://jflex.de/
// source: src/main/java/PaqueteFlex/Jflex.flex

package Principal;
import java.util.ArrayList;
import java_cup.runtime.Symbol;


// See https://github.com/jflex-de/jflex/issues/222
@SuppressWarnings("FallThrough")
class AnalizadorLexico implements java_cup.runtime.Scanner {

  /** This character denotes the end of file. */
  public static final int YYEOF = -1;

  /** Initial size of the lookahead buffer. */
  private static final int ZZ_BUFFERSIZE = 16384;

  // Lexical states.
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0, 0
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\37\u0100\1\u0200\267\u0100\10\u0300\u1020\u0100";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\1\1\1\2\2\3\1\4\22\0\1\5\1\6"+
    "\1\7\1\0\1\10\1\11\2\0\1\12\1\13\1\14"+
    "\1\15\1\16\1\17\1\20\1\21\1\22\11\23\1\24"+
    "\1\0\1\25\1\26\1\27\2\0\1\30\1\31\1\32"+
    "\1\33\1\34\3\35\1\36\3\35\1\37\1\40\1\41"+
    "\1\42\1\35\1\43\10\35\1\44\1\0\1\44\1\0"+
    "\1\45\1\0\1\46\1\47\1\50\1\51\1\52\1\53"+
    "\1\54\1\55\1\56\2\57\1\60\1\61\1\62\1\63"+
    "\1\64\1\57\1\65\1\66\1\67\1\70\1\71\1\57"+
    "\1\72\1\57\1\73\1\0\1\74\10\0\1\3\105\0"+
    "\1\75\u0154\0\1\76\7\0\2\3\326\0\u0100\3";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[1024];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\1\4\1\3\1\5\3\1"+
    "\1\6\1\7\1\10\1\11\1\12\1\13\1\12\1\14"+
    "\1\15\2\16\1\17\1\20\1\21\1\22\11\23\1\24"+
    "\2\25\2\24\3\25\1\24\3\25\2\24\1\25\1\24"+
    "\1\1\1\0\1\26\1\0\1\27\1\0\1\30\1\31"+
    "\1\32\3\0\1\33\1\23\1\0\6\23\1\34\3\23"+
    "\1\35\22\25\1\36\1\25\1\37\1\0\1\40\1\41"+
    "\7\23\1\3\3\23\31\25\11\23\17\25\1\42\3\25"+
    "\1\43\1\25\1\44\1\45\1\46\1\47\1\25\1\50"+
    "\10\23\2\25\1\50\2\25\1\51\5\25\1\52\5\25"+
    "\1\53\2\25\10\23\1\25\1\54\1\55\2\25\1\56"+
    "\12\25\3\23\1\57\1\60\3\23\7\25\1\61\6\25"+
    "\2\23\1\62\2\23\1\63\4\25\1\64\1\65\1\66"+
    "\1\67\3\25\1\70\1\25\1\71\3\23\6\25\1\72"+
    "\1\73\1\23\1\74\1\23\5\25\1\75\1\76\1\77"+
    "\2\25\1\100\1\101\1\102\3\25\1\103\1\104";

  private static int [] zzUnpackAction() {
    int [] result = new int[298];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\77\0\77\0\77\0\77\0\176\0\275\0\374"+
    "\0\u013b\0\u017a\0\77\0\77\0\77\0\77\0\u01b9\0\77"+
    "\0\u01f8\0\u0237\0\77\0\u0276\0\u02b5\0\77\0\77\0\u02f4"+
    "\0\77\0\u0333\0\u0372\0\u03b1\0\u03f0\0\u042f\0\u046e\0\u04ad"+
    "\0\u04ec\0\u052b\0\u056a\0\u05a9\0\u05e8\0\u0627\0\u0666\0\u056a"+
    "\0\u06a5\0\u06e4\0\u0723\0\u0762\0\u07a1\0\u07e0\0\u081f\0\u085e"+
    "\0\u089d\0\77\0\u08dc\0\u091b\0\77\0\u013b\0\77\0\u017a"+
    "\0\77\0\77\0\77\0\u095a\0\u0237\0\u0276\0\77\0\u0999"+
    "\0\u09d8\0\u0a17\0\u0a56\0\u0a95\0\u0ad4\0\u0b13\0\u0b52\0\u0372"+
    "\0\u0b91\0\u0bd0\0\u0c0f\0\u0c4e\0\u0c8d\0\u0ccc\0\u0d0b\0\u0d4a"+
    "\0\u0d89\0\u0dc8\0\u0e07\0\u0e46\0\u0e85\0\u0ec4\0\u0f03\0\u0f42"+
    "\0\u0f81\0\u0fc0\0\u0fff\0\u103e\0\u107d\0\u10bc\0\u10fb\0\u113a"+
    "\0\77\0\u1179\0\u095a\0\u0372\0\u09d8\0\u11b8\0\u11f7\0\u1236"+
    "\0\u1275\0\u12b4\0\u12f3\0\u0372\0\u1332\0\u1371\0\u13b0\0\u0c4e"+
    "\0\u13ef\0\u142e\0\u146d\0\u14ac\0\u14eb\0\u152a\0\u1569\0\u15a8"+
    "\0\u15e7\0\u1626\0\u1665\0\u16a4\0\u16e3\0\u1722\0\u1761\0\u17a0"+
    "\0\u17df\0\u181e\0\u185d\0\u189c\0\u18db\0\u191a\0\u1959\0\u1998"+
    "\0\u19d7\0\u1a16\0\u1a55\0\u1a94\0\u1ad3\0\u1b12\0\u1b51\0\u1b90"+
    "\0\u1bcf\0\u1c0e\0\u1c4d\0\u1c8c\0\u1ccb\0\u1d0a\0\u1d49\0\u1d88"+
    "\0\u1dc7\0\u1e06\0\u1e45\0\u1e84\0\u1ec3\0\u1f02\0\u1f41\0\u1f80"+
    "\0\u056a\0\u1fbf\0\u1ffe\0\u203d\0\u056a\0\u207c\0\u056a\0\u056a"+
    "\0\u056a\0\u056a\0\u20bb\0\u0372\0\u20fa\0\u2139\0\u2178\0\u21b7"+
    "\0\u21f6\0\u2235\0\u2274\0\u22b3\0\u22f2\0\u2331\0\u056a\0\u2370"+
    "\0\u23af\0\u056a\0\u23ee\0\u242d\0\u246c\0\u24ab\0\u24ea\0\u056a"+
    "\0\u2529\0\u2568\0\u25a7\0\u25e6\0\u2625\0\u056a\0\u2664\0\u26a3"+
    "\0\u26e2\0\u2721\0\u2760\0\u279f\0\u27de\0\u281d\0\u285c\0\u289b"+
    "\0\u28da\0\u2919\0\u056a\0\u2958\0\u2997\0\u056a\0\u29d6\0\u2a15"+
    "\0\u2a54\0\u2a93\0\u2ad2\0\u2b11\0\u2b50\0\u2b8f\0\u2bce\0\u2c0d"+
    "\0\u2c4c\0\u2c8b\0\u2cca\0\u0372\0\u0372\0\u2d09\0\u2d48\0\u2d87"+
    "\0\u2dc6\0\u2e05\0\u2e44\0\u2e83\0\u2ec2\0\u2f01\0\u2f40\0\u056a"+
    "\0\u2f7f\0\u2fbe\0\u2ffd\0\u303c\0\u307b\0\u30ba\0\u30f9\0\u3138"+
    "\0\u0372\0\u3177\0\u31b6\0\u056a\0\u31f5\0\u3234\0\u3273\0\u32b2"+
    "\0\u056a\0\u056a\0\u056a\0\u056a\0\u32f1\0\u3330\0\u336f\0\u056a"+
    "\0\u33ae\0\u056a\0\u33ed\0\u342c\0\u346b\0\u34aa\0\u34e9\0\u3528"+
    "\0\u3567\0\u35a6\0\u35e5\0\u056a\0\u056a\0\u3624\0\u0372\0\u3663"+
    "\0\u36a2\0\u36e1\0\u3720\0\u375f\0\u379e\0\u056a\0\u0372\0\u0372"+
    "\0\u37dd\0\u381c\0\u056a\0\u056a\0\u056a\0\u385b\0\u389a\0\u38d9"+
    "\0\u056a\0\u056a";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[298];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11"+
    "\1\12\1\13\1\14\1\15\1\16\1\17\1\20\1\21"+
    "\1\22\1\23\1\24\1\25\1\26\1\27\1\30\1\31"+
    "\1\32\1\33\1\34\1\35\1\36\1\33\1\37\1\40"+
    "\1\33\1\41\1\42\1\33\1\4\1\2\1\43\1\44"+
    "\1\45\1\46\1\47\1\43\1\50\1\51\1\52\1\50"+
    "\1\53\1\54\1\55\1\43\1\56\1\57\1\60\1\61"+
    "\1\50\1\43\2\50\1\62\1\63\1\2\101\0\1\4"+
    "\101\0\1\64\117\0\1\65\55\0\1\66\1\0\1\67"+
    "\12\0\2\66\4\0\14\66\2\0\26\66\10\0\1\70"+
    "\2\0\1\71\5\70\1\0\5\70\2\0\1\70\1\0"+
    "\44\70\20\0\1\72\100\0\1\73\101\0\2\74\73\0"+
    "\1\75\1\0\2\76\73\0\1\75\1\0\2\25\101\0"+
    "\1\77\72\0\2\33\4\0\10\33\1\100\3\33\1\0"+
    "\1\101\27\33\24\0\2\33\4\0\14\33\1\0\1\101"+
    "\27\33\24\0\2\33\4\0\14\33\1\0\1\101\12\33"+
    "\1\102\2\33\1\103\11\33\24\0\2\33\4\0\14\33"+
    "\1\0\1\101\4\33\1\104\22\33\24\0\2\33\4\0"+
    "\14\33\1\0\1\101\12\33\1\105\14\33\24\0\2\33"+
    "\4\0\14\33\1\0\1\101\13\33\1\106\13\33\24\0"+
    "\2\33\4\0\14\33\1\0\1\101\4\33\1\107\22\33"+
    "\24\0\2\33\4\0\13\33\1\110\1\0\1\101\27\33"+
    "\24\0\2\33\4\0\14\33\1\0\1\101\1\111\16\33"+
    "\1\112\2\33\1\113\4\33\24\0\2\50\4\0\14\50"+
    "\1\0\1\114\27\50\24\0\2\50\4\0\14\50\1\0"+
    "\1\114\15\50\1\115\11\50\24\0\2\50\4\0\14\50"+
    "\1\0\1\114\1\116\11\50\1\117\2\50\1\120\11\50"+
    "\24\0\2\50\4\0\14\50\1\0\1\114\4\50\1\121"+
    "\22\50\24\0\2\50\4\0\14\50\1\0\1\114\14\50"+
    "\1\122\3\50\1\123\3\50\1\124\2\50\24\0\2\50"+
    "\4\0\14\50\1\0\1\114\1\125\26\50\24\0\2\50"+
    "\4\0\14\50\1\0\1\114\14\50\1\126\12\50\24\0"+
    "\2\50\4\0\14\50\1\0\1\114\4\50\1\127\10\50"+
    "\1\130\11\50\24\0\2\50\4\0\14\50\1\0\1\114"+
    "\10\50\1\131\16\50\24\0\2\50\4\0\14\50\1\0"+
    "\1\114\22\50\1\132\4\50\24\0\2\50\4\0\14\50"+
    "\1\0\1\114\17\50\1\133\7\50\24\0\2\50\4\0"+
    "\14\50\1\0\1\114\1\134\3\50\1\135\22\50\24\0"+
    "\2\50\4\0\14\50\1\0\1\114\4\50\1\136\3\50"+
    "\1\137\16\50\24\0\2\50\4\0\14\50\1\0\1\114"+
    "\1\140\26\50\100\0\1\141\5\0\1\142\113\0\1\74"+
    "\1\143\75\0\2\33\4\0\3\33\1\144\10\33\1\0"+
    "\1\101\27\33\24\0\2\145\4\0\14\145\2\0\27\145"+
    "\24\0\2\33\4\0\14\33\1\0\1\101\1\146\26\33"+
    "\24\0\2\33\4\0\14\33\1\0\1\101\14\33\1\147"+
    "\12\33\24\0\2\33\4\0\14\33\1\0\1\101\20\33"+
    "\1\150\6\33\24\0\2\33\4\0\14\33\1\0\1\101"+
    "\10\33\1\151\16\33\24\0\2\33\4\0\14\33\1\0"+
    "\1\101\16\33\1\152\10\33\24\0\2\33\4\0\14\33"+
    "\1\0\1\101\21\33\1\153\5\33\24\0\2\33\4\0"+
    "\14\33\1\0\1\101\17\33\1\154\7\33\24\0\2\33"+
    "\4\0\14\33\1\0\1\101\10\33\1\155\4\33\1\156"+
    "\11\33\24\0\2\33\4\0\14\33\1\0\1\101\1\33"+
    "\1\157\25\33\24\0\2\160\4\0\14\160\2\0\27\160"+
    "\24\0\2\50\4\0\14\50\1\0\1\114\15\50\1\161"+
    "\11\50\24\0\2\50\4\0\14\50\1\0\1\114\3\50"+
    "\1\162\23\50\24\0\2\50\4\0\14\50\1\0\1\114"+
    "\1\163\26\50\24\0\2\50\4\0\14\50\1\0\1\114"+
    "\20\50\1\164\6\50\24\0\2\50\4\0\14\50\1\0"+
    "\1\114\2\50\1\165\15\50\1\166\2\50\1\167\3\50"+
    "\24\0\2\50\4\0\14\50\1\0\1\114\21\50\1\170"+
    "\5\50\24\0\2\50\4\0\14\50\1\0\1\114\2\50"+
    "\1\171\24\50\24\0\2\50\4\0\14\50\1\0\1\114"+
    "\21\50\1\172\5\50\24\0\2\50\4\0\14\50\1\0"+
    "\1\114\2\50\1\173\24\50\24\0\2\50\4\0\14\50"+
    "\1\0\1\114\2\50\1\174\15\50\1\175\6\50\24\0"+
    "\2\50\4\0\14\50\1\0\1\114\4\50\1\176\22\50"+
    "\24\0\2\50\4\0\14\50\1\0\1\114\6\50\1\177"+
    "\20\50\24\0\2\50\4\0\14\50\1\0\1\114\4\50"+
    "\1\200\22\50\24\0\2\50\4\0\14\50\1\0\1\114"+
    "\4\50\1\201\5\50\1\202\14\50\24\0\2\50\4\0"+
    "\14\50\1\0\1\114\10\50\1\203\16\50\24\0\2\50"+
    "\4\0\14\50\1\0\1\114\10\50\1\204\16\50\24\0"+
    "\2\50\4\0\14\50\1\0\1\114\1\205\26\50\24\0"+
    "\2\50\4\0\14\50\1\0\1\114\14\50\1\206\12\50"+
    "\24\0\2\50\4\0\14\50\1\0\1\114\14\50\1\207"+
    "\12\50\24\0\2\50\4\0\14\50\1\0\1\114\14\50"+
    "\1\210\12\50\7\0\1\3\113\0\2\33\4\0\14\33"+
    "\1\0\1\101\20\33\1\211\6\33\24\0\2\33\4\0"+
    "\14\33\1\0\1\101\20\33\1\212\6\33\24\0\2\33"+
    "\4\0\14\33\1\0\1\101\21\33\1\213\5\33\24\0"+
    "\2\33\4\0\14\33\1\0\1\101\13\33\1\214\13\33"+
    "\24\0\2\33\4\0\14\33\1\0\1\101\1\111\26\33"+
    "\24\0\2\33\4\0\14\33\1\0\1\101\15\33\1\215"+
    "\11\33\24\0\2\33\4\0\14\33\1\0\1\101\23\33"+
    "\1\216\3\33\24\0\2\33\4\0\14\33\1\0\1\101"+
    "\16\33\1\217\2\33\1\220\5\33\24\0\2\33\4\0"+
    "\14\33\1\0\1\101\12\33\1\221\14\33\24\0\2\50"+
    "\4\0\14\50\1\0\1\114\12\50\1\222\14\50\24\0"+
    "\2\50\4\0\14\50\1\0\1\114\4\50\1\223\22\50"+
    "\24\0\2\50\4\0\14\50\1\0\1\114\20\50\1\224"+
    "\6\50\24\0\2\50\4\0\14\50\1\0\1\114\4\50"+
    "\1\225\22\50\24\0\2\50\4\0\14\50\1\0\1\114"+
    "\17\50\1\226\7\50\24\0\2\50\4\0\14\50\1\0"+
    "\1\114\3\50\1\227\23\50\24\0\2\50\4\0\14\50"+
    "\1\0\1\114\15\50\1\230\11\50\24\0\2\50\4\0"+
    "\14\50\1\0\1\114\4\50\1\231\10\50\1\232\11\50"+
    "\24\0\2\50\4\0\14\50\1\0\1\114\17\50\1\233"+
    "\7\50\24\0\2\50\4\0\14\50\1\0\1\114\10\50"+
    "\1\234\16\50\24\0\2\50\4\0\14\50\1\0\1\114"+
    "\4\50\1\235\22\50\24\0\2\50\4\0\14\50\1\0"+
    "\1\114\12\50\1\236\4\50\1\237\7\50\24\0\2\50"+
    "\4\0\14\50\1\0\1\114\21\50\1\240\5\50\24\0"+
    "\2\50\4\0\14\50\1\0\1\114\17\50\1\241\7\50"+
    "\24\0\2\50\4\0\14\50\1\0\1\114\1\242\26\50"+
    "\24\0\2\50\4\0\14\50\1\0\1\114\14\50\1\243"+
    "\12\50\24\0\2\50\4\0\14\50\1\0\1\114\23\50"+
    "\1\244\3\50\24\0\2\50\4\0\14\50\1\0\1\114"+
    "\15\50\1\245\11\50\24\0\2\50\4\0\14\50\1\0"+
    "\1\114\14\50\1\246\12\50\24\0\2\50\4\0\14\50"+
    "\1\0\1\114\25\50\1\247\1\50\24\0\2\50\4\0"+
    "\14\50\1\0\1\114\12\50\1\250\14\50\24\0\2\50"+
    "\4\0\14\50\1\0\1\114\15\50\1\251\11\50\24\0"+
    "\2\50\4\0\14\50\1\0\1\114\15\50\1\252\11\50"+
    "\24\0\2\50\4\0\14\50\1\0\1\114\6\50\1\253"+
    "\20\50\24\0\2\33\4\0\14\33\1\0\1\101\4\33"+
    "\1\254\22\33\24\0\2\33\4\0\14\33\1\0\1\101"+
    "\21\33\1\255\5\33\24\0\2\33\4\0\14\33\1\0"+
    "\1\101\17\33\1\256\7\33\24\0\2\33\4\0\14\33"+
    "\1\0\1\101\10\33\1\257\16\33\24\0\2\33\4\0"+
    "\14\33\1\0\1\101\3\33\1\260\23\33\24\0\2\33"+
    "\4\0\14\33\1\0\1\101\1\261\26\33\24\0\2\33"+
    "\4\0\14\33\1\0\1\101\10\33\1\262\16\33\24\0"+
    "\2\33\4\0\14\33\1\0\1\101\4\33\1\263\22\33"+
    "\24\0\2\33\4\0\14\33\1\0\1\101\10\33\1\264"+
    "\16\33\24\0\2\50\4\0\14\50\1\0\1\114\4\50"+
    "\1\265\22\50\24\0\2\50\4\0\14\50\1\0\1\114"+
    "\14\50\1\266\12\50\24\0\2\50\4\0\14\50\1\0"+
    "\1\114\4\50\1\267\22\50\24\0\2\50\4\0\14\50"+
    "\1\0\1\114\14\50\1\270\12\50\24\0\2\50\4\0"+
    "\14\50\1\0\1\114\4\50\1\271\22\50\24\0\2\50"+
    "\4\0\14\50\1\0\1\114\4\50\1\272\22\50\24\0"+
    "\2\50\4\0\14\50\1\0\1\114\12\50\1\273\14\50"+
    "\24\0\2\50\4\0\14\50\1\0\1\114\17\50\1\274"+
    "\7\50\24\0\2\50\4\0\14\50\1\0\1\114\14\50"+
    "\1\275\12\50\24\0\2\50\4\0\14\50\1\0\1\114"+
    "\10\50\1\276\16\50\24\0\2\50\4\0\14\50\1\0"+
    "\1\114\4\50\1\277\22\50\24\0\2\50\4\0\14\50"+
    "\1\0\1\114\17\50\1\300\7\50\24\0\2\50\4\0"+
    "\14\50\1\0\1\114\22\50\1\301\4\50\24\0\2\50"+
    "\4\0\14\50\1\0\1\114\4\50\1\302\22\50\24\0"+
    "\2\50\4\0\14\50\1\0\1\114\1\303\26\50\24\0"+
    "\2\50\4\0\14\50\1\0\1\114\17\50\1\304\7\50"+
    "\24\0\2\50\4\0\14\50\1\0\1\114\21\50\1\305"+
    "\5\50\24\0\2\50\4\0\14\50\1\0\1\114\15\50"+
    "\1\306\11\50\24\0\2\50\4\0\14\50\1\0\1\114"+
    "\2\50\1\307\24\50\24\0\2\50\4\0\14\50\1\0"+
    "\1\114\4\50\1\310\22\50\24\0\2\33\4\0\14\33"+
    "\1\0\1\101\17\33\1\311\7\33\24\0\2\33\4\0"+
    "\14\33\1\0\1\101\22\33\1\312\4\33\24\0\2\33"+
    "\4\0\14\33\1\0\1\101\14\33\1\313\12\33\24\0"+
    "\2\33\4\0\14\33\1\0\1\101\15\33\1\314\11\33"+
    "\24\0\2\33\4\0\14\33\1\0\1\101\3\33\1\315"+
    "\23\33\24\0\2\33\4\0\14\33\1\0\1\101\4\33"+
    "\1\316\22\33\24\0\2\33\4\0\14\33\1\0\1\101"+
    "\6\33\1\317\20\33\24\0\2\33\4\0\14\33\1\0"+
    "\1\101\2\33\1\320\24\33\24\0\2\50\4\0\14\50"+
    "\1\0\1\114\1\321\26\50\24\0\2\50\4\0\14\50"+
    "\1\0\1\114\1\322\26\50\24\0\2\50\4\0\14\50"+
    "\1\0\1\114\15\50\1\323\11\50\24\0\2\50\4\0"+
    "\14\50\1\0\1\114\13\50\1\324\13\50\24\0\2\50"+
    "\4\0\14\50\1\0\1\114\23\50\1\325\3\50\24\0"+
    "\2\50\4\0\14\50\1\0\1\114\15\50\1\326\11\50"+
    "\24\0\2\50\4\0\14\50\1\0\1\114\2\50\1\327"+
    "\24\50\24\0\2\50\4\0\14\50\1\0\1\114\1\50"+
    "\1\330\25\50\24\0\2\50\4\0\14\50\1\0\1\114"+
    "\14\50\1\331\12\50\24\0\2\50\4\0\14\50\1\0"+
    "\1\114\10\50\1\332\16\50\24\0\2\50\4\0\14\50"+
    "\1\0\1\114\13\50\1\333\13\50\24\0\2\50\4\0"+
    "\14\50\1\0\1\114\14\50\1\334\12\50\24\0\2\50"+
    "\4\0\14\50\1\0\1\114\10\50\1\335\16\50\24\0"+
    "\2\50\4\0\14\50\1\0\1\114\17\50\1\336\7\50"+
    "\24\0\2\50\4\0\14\50\1\0\1\114\10\50\1\337"+
    "\16\50\24\0\2\50\4\0\14\50\1\0\1\114\14\50"+
    "\1\340\12\50\24\0\2\33\4\0\14\33\1\0\1\101"+
    "\22\33\1\341\4\33\24\0\2\33\4\0\14\33\1\0"+
    "\1\101\2\33\1\342\24\33\24\0\2\33\4\0\14\33"+
    "\1\0\1\101\1\343\26\33\24\0\2\33\4\0\14\33"+
    "\1\0\1\101\20\33\1\344\6\33\24\0\2\33\4\0"+
    "\14\33\1\0\1\101\1\345\14\33\1\346\11\33\24\0"+
    "\2\33\4\0\14\33\1\0\1\101\3\33\1\347\23\33"+
    "\24\0\2\33\4\0\14\33\1\0\1\101\10\33\1\350"+
    "\16\33\24\0\2\33\4\0\14\33\1\0\1\101\1\345"+
    "\14\33\1\345\11\33\24\0\2\50\4\0\14\50\1\0"+
    "\1\114\14\50\1\351\12\50\24\0\2\50\4\0\1\352"+
    "\13\50\1\0\1\114\27\50\24\0\2\50\4\0\14\50"+
    "\1\0\1\114\4\50\1\353\22\50\24\0\2\50\4\0"+
    "\14\50\1\0\1\114\4\50\1\354\22\50\24\0\2\50"+
    "\4\0\14\50\1\0\1\114\4\50\1\355\22\50\24\0"+
    "\2\50\4\0\14\50\1\0\1\114\10\50\1\356\16\50"+
    "\24\0\2\50\4\0\14\50\1\0\1\114\3\50\1\357"+
    "\23\50\24\0\2\50\4\0\14\50\1\0\1\114\17\50"+
    "\1\360\7\50\24\0\2\50\4\0\14\50\1\0\1\114"+
    "\4\50\1\361\22\50\24\0\2\50\4\0\14\50\1\0"+
    "\1\114\2\50\1\362\24\50\24\0\2\50\4\0\14\50"+
    "\1\0\1\114\21\50\1\363\5\50\24\0\2\50\4\0"+
    "\14\50\1\0\1\114\1\364\26\50\24\0\2\50\4\0"+
    "\14\50\1\0\1\114\16\50\1\365\10\50\24\0\2\50"+
    "\4\0\14\50\1\0\1\114\21\50\1\366\5\50\24\0"+
    "\2\33\4\0\14\33\1\0\1\101\2\33\1\367\24\33"+
    "\24\0\2\33\4\0\14\33\1\0\1\101\21\33\1\370"+
    "\5\33\24\0\2\33\4\0\14\33\1\0\1\101\17\33"+
    "\1\371\7\33\24\0\2\33\4\0\14\33\1\0\1\101"+
    "\20\33\1\345\6\33\24\0\2\33\4\0\14\33\1\0"+
    "\1\101\1\372\26\33\24\0\2\33\4\0\14\33\1\0"+
    "\1\101\3\33\1\373\23\33\24\0\2\50\4\0\14\50"+
    "\1\0\1\114\15\50\1\374\11\50\24\0\2\50\4\0"+
    "\1\50\1\375\2\50\1\376\6\50\1\377\1\0\1\114"+
    "\27\50\24\0\2\50\4\0\14\50\1\0\1\114\14\50"+
    "\1\u0100\12\50\24\0\2\50\4\0\14\50\1\0\1\114"+
    "\17\50\1\u0101\7\50\24\0\2\50\4\0\14\50\1\0"+
    "\1\114\20\50\1\u0102\6\50\24\0\2\50\4\0\14\50"+
    "\1\0\1\114\17\50\1\u0103\7\50\24\0\2\50\4\0"+
    "\14\50\1\0\1\114\4\50\1\u0104\22\50\24\0\2\50"+
    "\4\0\14\50\1\0\1\114\14\50\1\u0105\12\50\24\0"+
    "\2\50\4\0\14\50\1\0\1\114\10\50\1\u0106\16\50"+
    "\24\0\2\50\4\0\14\50\1\0\1\114\13\50\1\u0107"+
    "\13\50\24\0\2\50\4\0\14\50\1\0\1\114\20\50"+
    "\1\u0108\6\50\24\0\2\50\4\0\14\50\1\0\1\114"+
    "\1\u0109\26\50\24\0\2\50\4\0\14\50\1\0\1\114"+
    "\4\50\1\u010a\22\50\24\0\2\33\4\0\14\33\1\0"+
    "\1\101\21\33\1\u010b\5\33\24\0\2\33\4\0\14\33"+
    "\1\0\1\101\15\33\1\u010c\11\33\24\0\2\33\4\0"+
    "\14\33\1\0\1\101\3\33\1\u010d\23\33\24\0\2\33"+
    "\4\0\14\33\1\0\1\101\1\346\14\33\1\346\11\33"+
    "\24\0\2\50\4\0\14\50\1\0\1\114\15\50\1\u010e"+
    "\11\50\24\0\2\50\4\0\14\50\1\0\1\114\14\50"+
    "\1\u010f\12\50\24\0\2\50\4\0\14\50\1\0\1\114"+
    "\4\50\1\u0110\22\50\24\0\2\50\4\0\14\50\1\0"+
    "\1\114\21\50\1\u0111\5\50\24\0\2\50\4\0\14\50"+
    "\1\0\1\114\21\50\1\u0112\5\50\24\0\2\50\4\0"+
    "\14\50\1\0\1\114\1\u0113\26\50\24\0\2\50\4\0"+
    "\14\50\1\0\1\114\15\50\1\u0114\11\50\24\0\2\50"+
    "\4\0\14\50\1\0\1\114\12\50\1\u0115\14\50\24\0"+
    "\2\33\4\0\14\33\1\0\1\101\15\33\1\u0116\11\33"+
    "\24\0\2\33\4\0\14\33\1\0\1\101\17\33\1\u0117"+
    "\7\33\24\0\2\33\4\0\14\33\1\0\1\101\4\33"+
    "\1\u0118\22\33\24\0\2\50\4\0\14\50\1\0\1\114"+
    "\12\50\1\u0119\14\50\24\0\2\50\4\0\14\50\1\0"+
    "\1\114\21\50\1\u011a\5\50\24\0\2\50\4\0\14\50"+
    "\1\0\1\114\1\u011b\26\50\24\0\2\50\4\0\14\50"+
    "\1\0\1\114\1\u011c\26\50\24\0\2\50\4\0\14\50"+
    "\1\0\1\114\1\u011d\26\50\24\0\2\50\4\0\14\50"+
    "\1\0\1\114\17\50\1\u011e\7\50\24\0\2\33\4\0"+
    "\14\33\1\0\1\101\17\33\1\u011f\7\33\24\0\2\33"+
    "\4\0\14\33\1\0\1\101\20\33\1\u0120\6\33\24\0"+
    "\2\50\4\0\14\50\1\0\1\114\4\50\1\u0121\22\50"+
    "\24\0\2\50\4\0\14\50\1\0\1\114\4\50\1\u0122"+
    "\22\50\24\0\2\50\4\0\14\50\1\0\1\114\12\50"+
    "\1\u0123\14\50\24\0\2\50\4\0\14\50\1\0\1\114"+
    "\17\50\1\u0124\7\50\24\0\2\50\4\0\14\50\1\0"+
    "\1\114\17\50\1\u0125\7\50\24\0\2\50\4\0\14\50"+
    "\1\0\1\114\1\u0126\26\50\24\0\2\50\4\0\14\50"+
    "\1\0\1\114\17\50\1\u0127\7\50\24\0\2\50\4\0"+
    "\14\50\1\0\1\114\14\50\1\u0128\12\50\24\0\2\50"+
    "\4\0\14\50\1\0\1\114\15\50\1\u0129\11\50\24\0"+
    "\2\50\4\0\14\50\1\0\1\114\15\50\1\u012a\11\50"+
    "\2\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[14616];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** Error code for "Unknown internal scanner error". */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  /** Error code for "could not match input". */
  private static final int ZZ_NO_MATCH = 1;
  /** Error code for "pushback value was too large". */
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /**
   * Error messages for {@link #ZZ_UNKNOWN_ERROR}, {@link #ZZ_NO_MATCH}, and
   * {@link #ZZ_PUSHBACK_2BIG} respectively.
   */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\4\11\5\1\4\11\1\1\1\11\2\1\1\11"+
    "\2\1\2\11\1\1\1\11\30\1\1\11\1\1\1\0"+
    "\1\11\1\0\1\11\1\0\3\11\3\0\1\11\1\1"+
    "\1\0\37\1\1\11\1\0\310\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[298];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** Input device. */
  private java.io.Reader zzReader;

  /** Current state of the DFA. */
  private int zzState;

  /** Current lexical state. */
  private int zzLexicalState = YYINITIAL;

  /**
   * This buffer contains the current text to be matched and is the source of the {@link #yytext()}
   * string.
   */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** Text position at the last accepting state. */
  private int zzMarkedPos;

  /** Current text position in the buffer. */
  private int zzCurrentPos;

  /** Marks the beginning of the {@link #yytext()} string in the buffer. */
  private int zzStartRead;

  /** Marks the last character in the buffer, that has been read from input. */
  private int zzEndRead;

  /**
   * Whether the scanner is at the end of file.
   * @see #yyatEOF
   */
  private boolean zzAtEOF;

  /**
   * The number of occupied positions in {@link #zzBuffer} beyond {@link #zzEndRead}.
   *
   * <p>When a lead/high surrogate has been read from the input stream into the final
   * {@link #zzBuffer} position, this will have a value of 1; otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /** Number of newlines encountered up to the start of the matched text. */
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  private int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  private boolean zzEOFDone;

  /* user code: */

public int tabulaciones;
public ArrayList<Simbolos> sim;

public void add(String nuevo) {

        boolean bandera = false;
        String a = nuevo;
       
        int numero = 0;
        if (sim.size() == 0) {
            Simbolos sim2 = new Simbolos();
            sim2.setCantidad(1);
            sim2.setValor(a);
            sim.add(sim2);
        } else {
            
            for (int x = 0; x < sim.size(); x++) {
                    
                Simbolos sim1 = sim.get(x);

                if (sim1.getValor().equals(a)) {
                    bandera = true;
                    numero = x;

                    x = sim.size();
                } else {
                    bandera = false;
                }
            }

            if (bandera == true) {
               
                Simbolos val = sim.get(numero);
                int n = val.getCantidad();
                n = n + 1;
                val.setCantidad(n);
                sim.remove(numero);
                sim.add(val);
                   
            } else {
              
                Simbolos sim2 = new Simbolos();
                sim2.setCantidad(1);
                sim2.setValor(a);
                sim.add(sim2);
            }
        }  
    }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  AnalizadorLexico(java.io.Reader in) {
      this.sim = new ArrayList<>();
    this.tabulaciones = 0;
    this.zzReader = in;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  /**
   * Refills the input buffer.
   *
   * @return {@code false} iff there was new input.
   * @exception java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead - zzStartRead);

      /* translate stored positions */
      zzEndRead -= zzStartRead;
      zzCurrentPos -= zzStartRead;
      zzMarkedPos -= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length * 2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException(
          "Reader returned 0 characters. See JFlex examples/zero-reader for a workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
        if (numRead == requested) { // We requested too few chars to encode a full Unicode character
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        } else {                    // There is room in the buffer for at least one more char
          int c = zzReader.read();  // Expecting to read a paired low surrogate char
          if (c == -1) {
            return true;
          } else {
            zzBuffer[zzEndRead++] = (char)c;
          }
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }


  /**
   * Closes the input reader.
   *
   * @throws java.io.IOException if the reader could not be closed.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true; // indicate end of file
    zzEndRead = zzStartRead; // invalidate buffer

    if (zzReader != null) {
      zzReader.close();
    }
  }


  /**
   * Resets the scanner to read from a new input stream.
   *
   * <p>Does not close the old reader.
   *
   * <p>All internal variables are reset, the old input stream <b>cannot</b> be reused (internal
   * buffer is discarded and lost). Lexical state is set to {@code ZZ_INITIAL}.
   *
   * <p>Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader The new input stream.
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzEOFDone = false;
    yyResetPosition();
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE) {
      zzBuffer = new char[ZZ_BUFFERSIZE];
    }
  }

  /**
   * Resets the input position.
   */
  private final void yyResetPosition() {
      zzAtBOL  = true;
      zzAtEOF  = false;
      zzCurrentPos = 0;
      zzMarkedPos = 0;
      zzStartRead = 0;
      zzEndRead = 0;
      zzFinalHighSurrogate = 0;
      yyline = 0;
      yycolumn = 0;
      yychar = 0L;
  }


  /**
   * Returns whether the scanner has reached the end of the reader it reads from.
   *
   * @return whether the scanner has reached EOF.
   */
  public final boolean yyatEOF() {
    return zzAtEOF;
  }


  /**
   * Returns the current lexical state.
   *
   * @return the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state.
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   *
   * @return the matched text.
   */
  public final String yytext() {
    return new String(zzBuffer, zzStartRead, zzMarkedPos-zzStartRead);
  }


  /**
   * Returns the character at the given position from the matched text.
   *
   * <p>It is equivalent to {@code yytext().charAt(pos)}, but faster.
   *
   * @param position the position of the character to fetch. A value from 0 to {@code yylength()-1}.
   *
   * @return the character at {@code position}.
   */
  public final char yycharat(int position) {
    return zzBuffer[zzStartRead + position];
  }


  /**
   * How many characters were matched.
   *
   * @return the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * <p>In a well-formed scanner (no or only correct usage of {@code yypushback(int)} and a
   * match-all fallback rule) this method will only be called with things that
   * "Can't Possibly Happen".
   *
   * <p>If this method is called, something is seriously wrong (e.g. a JFlex bug producing a faulty
   * scanner etc.).
   *
   * <p>Usual syntax/scanner level error handling should be done in error fallback rules.
   *
   * @param errorCode the code of the error message to display.
   */
  private static void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    } catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * <p>They will be read again by then next call of the scanning method.
   *
   * @param number the number of characters to be read again. This number must not be greater than
   *     {@link #yylength()}.
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
  yyclose();    }
  }




  /**
   * Resumes scanning until the next regular expression is matched, the end of input is encountered
   * or an I/O-Error occurs.
   *
   * @return the next token.
   * @exception java.io.IOException if any I/O-Error occurs.
   */
  @Override  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char[] zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is
        // (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof)
            zzPeek = false;
          else
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
          {   return new Symbol(sym.EOF);
 }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { System.err.println("Error Léxico \"" + yytext() + "\" ["+ (yyline+1) + ":"+ (yycolumn+1) + ":"+ yychar + "]");
            }
            // fall through
          case 69: break;
          case 2:
            { this.tabulaciones++;
            }
            // fall through
          case 70: break;
          case 3:
            { 
            }
            // fall through
          case 71: break;
          case 4:
            { System.out.print(yytext());
            }
            // fall through
          case 72: break;
          case 5:
            { //this.tabulacion = 0;
            }
            // fall through
          case 73: break;
          case 6:
            { this.add("MODULO");
            }
            // fall through
          case 74: break;
          case 7:
            { this.add("PARENTESIS (");
            return new Symbol(sym.PARENTESIS1);
            }
            // fall through
          case 75: break;
          case 8:
            { this.add("PARENTESIS )");
            return new Symbol(sym.PARENTESIS2);
            }
            // fall through
          case 76: break;
          case 9:
            { this.add("MULTIPLICACION");
            }
            // fall through
          case 77: break;
          case 10:
            { this.add("RESTA");
            }
            // fall through
          case 78: break;
          case 11:
            { this.add("COMA");
            return new Symbol(sym.COMA);
            }
            // fall through
          case 79: break;
          case 12:
            { this.add("PUNTO");
            }
            // fall through
          case 80: break;
          case 13:
            { this.add("DIVISION");
            }
            // fall through
          case 81: break;
          case 14:
            { this.add("NUMEROS DECIMALES");
            }
            // fall through
          case 82: break;
          case 15:
            { this.add("DOS PUNTOS");
            return new Symbol(sym.DOS_PUNTOS);
            }
            // fall through
          case 83: break;
          case 16:
            { this.add("MENOR QUE");
            }
            // fall through
          case 84: break;
          case 17:
            { this.add("IGUAL");
            }
            // fall through
          case 85: break;
          case 18:
            { this.add("MAYOR QUE");
            }
            // fall through
          case 86: break;
          case 19:
            { this.add("VARIABLE CLASE");
            return new Symbol(sym.VARIABLE_CLASE);
            }
            // fall through
          case 87: break;
          case 20:
            { this.add("TIPO BOOLEANO");
            }
            // fall through
          case 88: break;
          case 21:
            { this.add("VARIABLE"); 
            return new Symbol(sym.VARIABLE);
            }
            // fall through
          case 89: break;
          case 22:
            { this.add("DISTINTO QUE");
            }
            // fall through
          case 90: break;
          case 23:
            { this.add("TIPO_DATO_CUP");
            }
            // fall through
          case 91: break;
          case 24:
            { this.add("COMENTARIO");
            }
            // fall through
          case 92: break;
          case 25:
            { this.add("INCREMENTO");
            }
            // fall through
          case 93: break;
          case 26:
            { this.add("DECREMENTO");
            }
            // fall through
          case 94: break;
          case 27:
            { this.add("IGUAL QUE");
            }
            // fall through
          case 95: break;
          case 28:
            { this.add("OR");
            }
            // fall through
          case 96: break;
          case 29:
            { this.add("ERROR");
            }
            // fall through
          case 97: break;
          case 30:
            { this.add("IF");
            }
            // fall through
          case 98: break;
          case 31:
            { this.add("EXPONENTE");
            }
            // fall through
          case 99: break;
          case 32:
            { this.add("NUMEROS REALES");
            }
            // fall through
          case 100: break;
          case 33:
            { this.add("AND");
            }
            // fall through
          case 101: break;
          case 34:
            { this.add("LEER");
            }
            // fall through
          case 102: break;
          case 35:
            { this.add("TIPO NULO");
            }
            // fall through
          case 103: break;
          case 36:
            { this.add("RAIZ");
            }
            // fall through
          case 104: break;
          case 37:
            { this.add("TIPO REAL");
            return new Symbol(sym.TIPO_DATO);
            }
            // fall through
          case 105: break;
          case 38:
            { this.add("SENO");
            }
            // fall through
          case 106: break;
          case 39:
            { this.add("SINO");
            }
            // fall through
          case 107: break;
          case 40:
            { this.add("CLASE");
            return new Symbol(sym.CLASE);
            }
            // fall through
          case 108: break;
          case 41:
            { this.add("DESDE");
            }
            // fall through
          case 109: break;
          case 42:
            { this.add("HACER");
            }
            // fall through
          case 110: break;
          case 43:
            { this.add("NUEVO");
            }
            // fall through
          case 111: break;
          case 44:
            { this.add("TIPO CADENA");
            return new Symbol(sym.TIPO_DATO);
            }
            // fall through
          case 112: break;
          case 45:
            { this.add("COSENO");
            }
            // fall through
          case 113: break;
          case 46:
            { this.add("TIPO ENTERO");
            return new Symbol(sym.TIPO_DATO);
            }
            // fall through
          case 114: break;
          case 47:
            { this.add("METODOS");
            return new Symbol(sym.METODOS);
            }
            // fall through
          case 115: break;
          case 48:
            { this.add("TIPO DE PROPIEDAD");
            return new Symbol(sym.TIPO_DE_METODOS);
            }
            // fall through
          case 116: break;
          case 49:
            { this.add("INCLUIR");
            }
            // fall through
          case 117: break;
          case 50:
            { this.add("ELIMINAR");
            }
            // fall through
          case 118: break;
          case 51:
            { this.add("TIPO BOOLEANO ");
          return new Symbol(sym.TIPO_DATO);
            }
            // fall through
          case 119: break;
          case 52:
            { this.add("DEVOLVER");
            }
            // fall through
          case 120: break;
          case 53:
            { this.add("ENCONCES");
            }
            // fall through
          case 121: break;
          case 54:
            { this.add("ESCRIBIR");
            }
            // fall through
          case 122: break;
          case 55:
            { this.add("EXTIENDE");
            }
            // fall through
          case 123: break;
          case 56:
            { this.add("MIENTRAS");
            }
            // fall through
          case 124: break;
          case 57:
            { this.add("TANGENTE");
            }
            // fall through
          case 125: break;
          case 58:
            { this.add("LOGARTIMO");
            }
            // fall through
          case 126: break;
          case 59:
            { this.add("PRINCIPAL");
            }
            // fall through
          case 127: break;
          case 60:
            { this.add("DESTRUCTOR");
            }
            // fall through
          case 128: break;
          case 61:
            { this.add("INSTANCIAR");
            }
            // fall through
          case 129: break;
          case 62:
            { this.add("CONSTRUCTOR"); 
            return new Symbol(sym.TIPO_DATO);
            }
            // fall through
          case 130: break;
          case 63:
            { this.add("PROPIEDADES"); 
            return new Symbol(sym.PROPIEDADES);
            }
            // fall through
          case 131: break;
          case 64:
            { this.add("CADENA:REAL");
            }
            // fall through
          case 132: break;
          case 65:
            { this.add("DECREMAR");
            }
            // fall through
          case 133: break;
          case 66:
            { this.add("INCREMENTAR");
            }
            // fall through
          case 134: break;
          case 67:
            { this.add("CADENA:ENTERO");
            }
            // fall through
          case 135: break;
          case 68:
            { this.add("CADENA:BOOLEANO");
            }
            // fall through
          case 136: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }

  /**
   * Runs the scanner on input files.
   *
   * This is a standalone scanner, it will print any unmatched
   * text to System.out unchanged.
   *
   * @param argv   the command line, contains the filenames to run
   *               the scanner on.
   */
  public static void main(String[] argv) {
    if (argv.length == 0) {
      System.out.println("Usage : java AnalizadorLexico [ --encoding <name> ] <inputfile(s)>");
    }
    else {
      int firstFilePos = 0;
      String encodingName = "UTF-8";
      if (argv[0].equals("--encoding")) {
        firstFilePos = 2;
        encodingName = argv[1];
        try {
          // Side-effect: is encodingName valid?
          java.nio.charset.Charset.forName(encodingName);
        } catch (Exception e) {
          System.out.println("Invalid encoding '" + encodingName + "'");
          return;
        }
      }
      for (int i = firstFilePos; i < argv.length; i++) {
        AnalizadorLexico scanner = null;
        try {
          java.io.FileInputStream stream = new java.io.FileInputStream(argv[i]);
          java.io.Reader reader = new java.io.InputStreamReader(stream, encodingName);
          scanner = new AnalizadorLexico(reader);
          while ( !scanner.zzAtEOF ) scanner.next_token();
        }
        catch (java.io.FileNotFoundException e) {
          System.out.println("File not found : \""+argv[i]+"\"");
        }
        catch (java.io.IOException e) {
          System.out.println("IO error scanning file \""+argv[i]+"\"");
          System.out.println(e);
        }
        catch (Exception e) {
          System.out.println("Unexpected exception:");
          e.printStackTrace();
        }
      }
    }
  }


}

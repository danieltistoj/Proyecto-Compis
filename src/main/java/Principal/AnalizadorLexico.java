// DO NOT EDIT
// Generated by JFlex 1.8.2 http://jflex.de/
// source: src/main/java/PaqueteFlex/Jflex.flex

package Principal;
import java.util.ArrayList;
import java_cup.runtime.Symbol;


// See https://github.com/jflex-de/jflex/issues/222
@SuppressWarnings("FallThrough")
class AnalizadorLexico implements java_cup.runtime.Scanner {

  /** This character denotes the end of file. */
  public static final int YYEOF = -1;

  /** Initial size of the lookahead buffer. */
  private static final int ZZ_BUFFERSIZE = 16384;

  // Lexical states.
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0, 0
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\37\u0100\1\u0200\267\u0100\10\u0300\u1020\u0100";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\1\1\1\2\2\3\1\4\22\0\1\5\1\6"+
    "\1\7\1\0\1\10\1\11\2\0\1\12\1\13\1\14"+
    "\1\15\1\16\1\17\1\20\1\21\1\22\11\23\1\24"+
    "\1\0\1\25\1\26\1\27\2\0\1\30\1\31\1\32"+
    "\1\33\1\34\3\35\1\36\3\35\1\37\1\40\1\41"+
    "\1\42\1\35\1\43\10\35\1\44\1\0\1\45\1\0"+
    "\1\46\1\0\1\47\1\50\1\51\1\52\1\53\1\54"+
    "\1\55\1\56\1\57\1\60\1\61\1\62\1\63\1\64"+
    "\1\65\1\66\1\61\1\67\1\70\1\71\1\72\1\73"+
    "\1\61\1\74\1\61\1\75\1\0\1\76\10\0\1\3"+
    "\105\0\1\77\u0154\0\1\100\7\0\2\3\326\0\u0100\3";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[1024];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\1\4\1\3\1\5\3\1"+
    "\1\6\1\7\1\10\1\11\1\12\1\13\1\14\1\15"+
    "\1\16\2\17\1\20\1\21\1\22\1\23\11\24\1\25"+
    "\1\26\1\27\2\30\3\27\3\30\1\27\3\30\2\27"+
    "\1\30\2\27\1\1\1\0\1\31\1\0\1\32\1\0"+
    "\1\33\1\34\1\35\3\0\1\36\1\24\1\0\7\24"+
    "\1\37\3\24\1\40\24\30\1\41\2\30\1\42\1\0"+
    "\1\43\1\44\10\24\1\45\3\24\34\30\12\24\21\30"+
    "\1\46\3\30\1\47\1\30\1\50\1\51\1\52\1\53"+
    "\2\30\1\54\11\24\2\30\1\54\2\30\1\55\6\30"+
    "\1\56\1\57\5\30\1\60\3\30\11\24\1\30\1\61"+
    "\1\62\3\30\1\63\13\30\4\24\1\64\1\65\3\24"+
    "\10\30\1\66\7\30\2\24\1\67\1\70\2\24\1\71"+
    "\4\30\1\72\1\67\1\73\1\74\1\75\3\30\1\76"+
    "\1\30\1\77\1\30\3\24\6\30\1\100\1\101\1\102"+
    "\1\24\1\103\1\24\5\30\1\104\1\105\1\106\2\30"+
    "\1\107\1\110\1\111\3\30\1\112\1\113";

  private static int [] zzUnpackAction() {
    int [] result = new int[328];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\101\0\101\0\101\0\101\0\202\0\303\0\u0104"+
    "\0\u0145\0\u0186\0\101\0\101\0\101\0\101\0\u01c7\0\101"+
    "\0\u0208\0\u0249\0\101\0\u028a\0\u02cb\0\101\0\101\0\u030c"+
    "\0\101\0\u034d\0\u038e\0\u03cf\0\u0410\0\u0451\0\u0492\0\u04d3"+
    "\0\u0514\0\u0555\0\101\0\101\0\u0596\0\u05d7\0\u0618\0\u0659"+
    "\0\u069a\0\u06db\0\u0596\0\u071c\0\u075d\0\u079e\0\u07df\0\u0820"+
    "\0\u0861\0\u08a2\0\u08e3\0\u0924\0\u0965\0\101\0\u09a6\0\u09e7"+
    "\0\101\0\u0145\0\101\0\u0186\0\101\0\101\0\101\0\u0a28"+
    "\0\u0249\0\u028a\0\101\0\u0a69\0\u0aaa\0\u0aeb\0\u0b2c\0\u0b6d"+
    "\0\u0bae\0\u0bef\0\u0c30\0\u0c71\0\u038e\0\u0cb2\0\u0cf3\0\u0d34"+
    "\0\u0d75\0\u0db6\0\u0df7\0\u0e38\0\u0e79\0\u0eba\0\u0efb\0\u0f3c"+
    "\0\u0f7d\0\u0fbe\0\u0fff\0\u1040\0\u1081\0\u10c2\0\u1103\0\u1144"+
    "\0\u1185\0\u11c6\0\u1207\0\u1248\0\u1289\0\u12ca\0\u130b\0\u134c"+
    "\0\101\0\u138d\0\u0a28\0\u038e\0\u0aaa\0\u13ce\0\u140f\0\u1450"+
    "\0\u1491\0\u14d2\0\u1513\0\u1554\0\u038e\0\u1595\0\u15d6\0\u1617"+
    "\0\u0d75\0\u1658\0\u1699\0\u16da\0\u171b\0\u175c\0\u179d\0\u17de"+
    "\0\u181f\0\u1860\0\u18a1\0\u18e2\0\u1923\0\u1964\0\u19a5\0\u19e6"+
    "\0\u1a27\0\u1a68\0\u1aa9\0\u1aea\0\u1b2b\0\u1b6c\0\u1bad\0\u1bee"+
    "\0\u1c2f\0\u1c70\0\u1cb1\0\u1cf2\0\u1d33\0\u1d74\0\u1db5\0\u1df6"+
    "\0\u1e37\0\u1e78\0\u1eb9\0\u1efa\0\u1f3b\0\u1f7c\0\u1fbd\0\u1ffe"+
    "\0\u203f\0\u2080\0\u20c1\0\u2102\0\u2143\0\u2184\0\u21c5\0\u2206"+
    "\0\u2247\0\u2288\0\u22c9\0\u230a\0\u234b\0\u238c\0\u23cd\0\u0596"+
    "\0\u240e\0\u244f\0\u2490\0\u0596\0\u24d1\0\u0596\0\u0596\0\u0596"+
    "\0\u0596\0\u2512\0\u2553\0\u038e\0\u2594\0\u25d5\0\u2616\0\u2657"+
    "\0\u2698\0\u26d9\0\u271a\0\u275b\0\u279c\0\u27dd\0\u281e\0\u0596"+
    "\0\u285f\0\u28a0\0\u0596\0\u28e1\0\u2922\0\u2963\0\u29a4\0\u29e5"+
    "\0\u2a26\0\u0596\0\u0596\0\u2a67\0\u2aa8\0\u2ae9\0\u2b2a\0\u2b6b"+
    "\0\u0596\0\u2bac\0\u2bed\0\u2c2e\0\u2c6f\0\u2cb0\0\u2cf1\0\u2d32"+
    "\0\u2d73\0\u2db4\0\u2df5\0\u2e36\0\u2e77\0\u2eb8\0\u2ef9\0\u0596"+
    "\0\u2f3a\0\u2f7b\0\u2fbc\0\u0596\0\u2ffd\0\u303e\0\u307f\0\u30c0"+
    "\0\u3101\0\u3142\0\u3183\0\u31c4\0\u3205\0\u3246\0\u3287\0\u32c8"+
    "\0\u3309\0\u334a\0\u338b\0\u038e\0\u038e\0\u33cc\0\u340d\0\u344e"+
    "\0\u348f\0\u34d0\0\u3511\0\u3552\0\u3593\0\u35d4\0\u3615\0\u3656"+
    "\0\u0596\0\u3697\0\u36d8\0\u3719\0\u375a\0\u379b\0\u37dc\0\u381d"+
    "\0\u385e\0\u389f\0\u038e\0\u038e\0\u38e0\0\u3921\0\u0596\0\u3962"+
    "\0\u39a3\0\u39e4\0\u3a25\0\u0596\0\u0596\0\u0596\0\u0596\0\u0596"+
    "\0\u3a66\0\u3aa7\0\u3ae8\0\u0596\0\u3b29\0\u0596\0\u3b6a\0\u3bab"+
    "\0\u3bec\0\u3c2d\0\u3c6e\0\u3caf\0\u3cf0\0\u3d31\0\u3d72\0\u3db3"+
    "\0\u0596\0\u0596\0\u0596\0\u3df4\0\u038e\0\u3e35\0\u3e76\0\u3eb7"+
    "\0\u3ef8\0\u3f39\0\u3f7a\0\u0596\0\u038e\0\u038e\0\u3fbb\0\u3ffc"+
    "\0\u0596\0\u0596\0\u0596\0\u403d\0\u407e\0\u40bf\0\u0596\0\u0596";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[328];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11"+
    "\1\12\1\13\1\14\1\15\1\16\1\17\1\20\1\21"+
    "\1\22\1\23\1\24\1\25\1\26\1\27\1\30\1\31"+
    "\1\32\1\33\1\34\1\35\1\36\1\33\1\37\1\40"+
    "\1\33\1\41\1\42\1\33\1\43\1\44\1\2\1\45"+
    "\1\46\1\47\1\50\1\51\1\52\1\53\1\54\1\55"+
    "\2\53\1\56\1\57\1\60\1\45\1\61\1\62\1\63"+
    "\1\64\1\53\1\65\2\53\1\66\1\67\1\2\103\0"+
    "\1\4\103\0\1\70\121\0\1\71\57\0\1\72\1\0"+
    "\1\73\12\0\2\72\4\0\14\72\3\0\27\72\10\0"+
    "\1\74\2\0\1\75\5\74\1\0\5\74\2\0\1\74"+
    "\1\0\46\74\20\0\1\76\102\0\1\77\103\0\2\100"+
    "\75\0\1\101\1\0\2\102\75\0\1\101\1\0\2\25"+
    "\103\0\1\103\74\0\2\33\4\0\10\33\1\104\3\33"+
    "\2\0\1\105\30\33\24\0\2\33\4\0\14\33\2\0"+
    "\1\105\30\33\24\0\2\33\4\0\14\33\2\0\1\105"+
    "\13\33\1\106\2\33\1\107\11\33\24\0\2\33\4\0"+
    "\14\33\2\0\1\105\4\33\1\110\23\33\24\0\2\33"+
    "\4\0\14\33\2\0\1\105\11\33\1\111\1\33\1\112"+
    "\14\33\24\0\2\33\4\0\14\33\2\0\1\105\14\33"+
    "\1\113\13\33\24\0\2\33\4\0\14\33\2\0\1\105"+
    "\4\33\1\114\23\33\24\0\2\33\4\0\13\33\1\115"+
    "\2\0\1\105\30\33\24\0\2\33\4\0\14\33\2\0"+
    "\1\105\1\116\17\33\1\117\2\33\1\120\4\33\24\0"+
    "\2\53\4\0\14\53\2\0\1\121\30\53\24\0\2\53"+
    "\4\0\14\53\2\0\1\121\16\53\1\122\11\53\24\0"+
    "\2\53\4\0\14\53\2\0\1\121\1\123\12\53\1\124"+
    "\2\53\1\125\11\53\24\0\2\53\4\0\14\53\2\0"+
    "\1\121\4\53\1\126\23\53\24\0\2\53\4\0\14\53"+
    "\2\0\1\121\11\53\1\127\3\53\1\130\3\53\1\131"+
    "\3\53\1\132\2\53\24\0\2\53\4\0\14\53\2\0"+
    "\1\121\1\133\27\53\24\0\2\53\4\0\14\53\2\0"+
    "\1\121\1\134\27\53\24\0\2\53\4\0\14\53\2\0"+
    "\1\121\15\53\1\135\12\53\24\0\2\53\4\0\14\53"+
    "\2\0\1\121\4\53\1\136\11\53\1\137\11\53\24\0"+
    "\2\53\4\0\14\53\2\0\1\121\10\53\1\140\17\53"+
    "\24\0\2\53\4\0\14\53\2\0\1\121\23\53\1\141"+
    "\4\53\24\0\2\53\4\0\14\53\2\0\1\121\20\53"+
    "\1\142\7\53\24\0\2\53\4\0\14\53\2\0\1\121"+
    "\1\143\3\53\1\144\23\53\24\0\2\53\4\0\14\53"+
    "\2\0\1\121\4\53\1\145\3\53\1\146\17\53\24\0"+
    "\2\53\4\0\14\53\2\0\1\121\1\147\27\53\24\0"+
    "\2\53\4\0\14\53\2\0\1\121\4\53\1\150\23\53"+
    "\102\0\1\151\5\0\1\152\115\0\1\100\1\153\77\0"+
    "\2\33\4\0\3\33\1\154\10\33\2\0\1\105\30\33"+
    "\24\0\2\155\4\0\14\155\3\0\30\155\24\0\2\33"+
    "\4\0\14\33\2\0\1\105\1\156\27\33\24\0\2\33"+
    "\4\0\14\33\2\0\1\105\15\33\1\157\12\33\24\0"+
    "\2\33\4\0\14\33\2\0\1\105\21\33\1\160\6\33"+
    "\24\0\2\33\4\0\14\33\2\0\1\105\4\33\1\161"+
    "\23\33\24\0\2\33\4\0\14\33\2\0\1\105\10\33"+
    "\1\162\17\33\24\0\2\33\4\0\14\33\2\0\1\105"+
    "\17\33\1\163\10\33\24\0\2\33\4\0\14\33\2\0"+
    "\1\105\22\33\1\164\5\33\24\0\2\33\4\0\14\33"+
    "\2\0\1\105\20\33\1\165\7\33\24\0\2\33\4\0"+
    "\14\33\2\0\1\105\10\33\1\166\5\33\1\167\11\33"+
    "\24\0\2\33\4\0\14\33\2\0\1\105\1\33\1\170"+
    "\26\33\24\0\2\171\4\0\14\171\3\0\30\171\24\0"+
    "\2\53\4\0\14\53\2\0\1\121\16\53\1\172\11\53"+
    "\24\0\2\53\4\0\14\53\2\0\1\121\3\53\1\173"+
    "\24\53\24\0\2\53\4\0\14\53\2\0\1\121\1\174"+
    "\27\53\24\0\2\53\4\0\14\53\2\0\1\121\21\53"+
    "\1\175\6\53\24\0\2\53\4\0\14\53\2\0\1\121"+
    "\2\53\1\176\16\53\1\177\2\53\1\200\3\53\24\0"+
    "\2\53\4\0\14\53\2\0\1\121\4\53\1\201\23\53"+
    "\24\0\2\53\4\0\14\53\2\0\1\121\22\53\1\202"+
    "\5\53\24\0\2\53\4\0\14\53\2\0\1\121\2\53"+
    "\1\203\25\53\24\0\2\53\4\0\14\53\2\0\1\121"+
    "\22\53\1\204\5\53\24\0\2\53\4\0\14\53\2\0"+
    "\1\121\13\53\1\205\14\53\24\0\2\53\4\0\14\53"+
    "\2\0\1\121\2\53\1\206\25\53\24\0\2\53\4\0"+
    "\14\53\2\0\1\121\2\53\1\207\16\53\1\210\6\53"+
    "\24\0\2\53\4\0\14\53\2\0\1\121\4\53\1\211"+
    "\23\53\24\0\2\53\4\0\14\53\2\0\1\121\6\53"+
    "\1\212\21\53\24\0\2\53\4\0\14\53\2\0\1\121"+
    "\4\53\1\213\23\53\24\0\2\53\4\0\14\53\2\0"+
    "\1\121\4\53\1\214\6\53\1\215\14\53\24\0\2\53"+
    "\4\0\14\53\2\0\1\121\10\53\1\216\17\53\24\0"+
    "\2\53\4\0\14\53\2\0\1\121\10\53\1\217\17\53"+
    "\24\0\2\53\4\0\14\53\2\0\1\121\1\220\27\53"+
    "\24\0\2\53\4\0\14\53\2\0\1\121\15\53\1\221"+
    "\12\53\24\0\2\53\4\0\14\53\2\0\1\121\15\53"+
    "\1\222\12\53\24\0\2\53\4\0\14\53\2\0\1\121"+
    "\15\53\1\223\12\53\24\0\2\53\4\0\14\53\2\0"+
    "\1\121\20\53\1\224\7\53\7\0\1\3\115\0\2\33"+
    "\4\0\14\33\2\0\1\105\21\33\1\225\6\33\24\0"+
    "\2\33\4\0\14\33\2\0\1\105\21\33\1\226\6\33"+
    "\24\0\2\33\4\0\14\33\2\0\1\105\22\33\1\227"+
    "\5\33\24\0\2\33\4\0\14\33\2\0\1\105\2\33"+
    "\1\230\25\33\24\0\2\33\4\0\14\33\2\0\1\105"+
    "\14\33\1\231\13\33\24\0\2\33\4\0\14\33\2\0"+
    "\1\105\1\116\27\33\24\0\2\33\4\0\14\33\2\0"+
    "\1\105\16\33\1\232\11\33\24\0\2\33\4\0\14\33"+
    "\2\0\1\105\24\33\1\233\3\33\24\0\2\33\4\0"+
    "\14\33\2\0\1\105\17\33\1\234\2\33\1\235\5\33"+
    "\24\0\2\33\4\0\14\33\2\0\1\105\13\33\1\236"+
    "\14\33\24\0\2\53\4\0\14\53\2\0\1\121\13\53"+
    "\1\237\14\53\24\0\2\53\4\0\14\53\2\0\1\121"+
    "\4\53\1\240\23\53\24\0\2\53\4\0\14\53\2\0"+
    "\1\121\21\53\1\241\6\53\24\0\2\53\4\0\14\53"+
    "\2\0\1\121\4\53\1\242\23\53\24\0\2\53\4\0"+
    "\14\53\2\0\1\121\20\53\1\243\7\53\24\0\2\53"+
    "\4\0\14\53\2\0\1\121\3\53\1\244\24\53\24\0"+
    "\2\53\4\0\14\53\2\0\1\121\16\53\1\245\11\53"+
    "\24\0\2\53\4\0\14\53\2\0\1\121\2\53\1\246"+
    "\25\53\24\0\2\53\4\0\14\53\2\0\1\121\4\53"+
    "\1\247\11\53\1\250\11\53\24\0\2\53\4\0\14\53"+
    "\2\0\1\121\20\53\1\251\7\53\24\0\2\53\4\0"+
    "\14\53\2\0\1\121\10\53\1\252\17\53\24\0\2\53"+
    "\4\0\14\53\2\0\1\121\21\53\1\253\6\53\24\0"+
    "\2\53\4\0\14\53\2\0\1\121\4\53\1\254\23\53"+
    "\24\0\2\53\4\0\14\53\2\0\1\121\13\53\1\255"+
    "\4\53\1\256\7\53\24\0\2\53\4\0\14\53\2\0"+
    "\1\121\22\53\1\257\5\53\24\0\2\53\4\0\14\53"+
    "\2\0\1\121\20\53\1\260\7\53\24\0\2\53\4\0"+
    "\14\53\2\0\1\121\1\261\27\53\24\0\2\53\4\0"+
    "\14\53\2\0\1\121\15\53\1\262\12\53\24\0\2\53"+
    "\4\0\14\53\2\0\1\121\24\53\1\263\3\53\24\0"+
    "\2\53\4\0\14\53\2\0\1\121\16\53\1\264\11\53"+
    "\24\0\2\53\4\0\14\53\2\0\1\121\15\53\1\265"+
    "\12\53\24\0\2\53\4\0\14\53\2\0\1\121\26\53"+
    "\1\266\1\53\24\0\2\53\4\0\14\53\2\0\1\121"+
    "\13\53\1\267\14\53\24\0\2\53\4\0\14\53\2\0"+
    "\1\121\16\53\1\270\11\53\24\0\2\53\4\0\14\53"+
    "\2\0\1\121\16\53\1\271\11\53\24\0\2\53\4\0"+
    "\14\53\2\0\1\121\6\53\1\272\21\53\24\0\2\53"+
    "\4\0\14\53\2\0\1\121\3\53\1\273\24\53\24\0"+
    "\2\33\4\0\14\33\2\0\1\105\4\33\1\274\23\33"+
    "\24\0\2\33\4\0\14\33\2\0\1\105\22\33\1\275"+
    "\5\33\24\0\2\33\4\0\14\33\2\0\1\105\20\33"+
    "\1\276\7\33\24\0\2\33\4\0\14\33\2\0\1\105"+
    "\23\33\1\277\4\33\24\0\2\33\4\0\14\33\2\0"+
    "\1\105\10\33\1\300\17\33\24\0\2\33\4\0\14\33"+
    "\2\0\1\105\3\33\1\301\24\33\24\0\2\33\4\0"+
    "\14\33\2\0\1\105\1\302\27\33\24\0\2\33\4\0"+
    "\14\33\2\0\1\105\10\33\1\303\17\33\24\0\2\33"+
    "\4\0\14\33\2\0\1\105\4\33\1\304\23\33\24\0"+
    "\2\33\4\0\14\33\2\0\1\105\10\33\1\305\17\33"+
    "\24\0\2\53\4\0\14\53\2\0\1\121\4\53\1\306"+
    "\23\53\24\0\2\53\4\0\14\53\2\0\1\121\15\53"+
    "\1\307\12\53\24\0\2\53\4\0\14\53\2\0\1\121"+
    "\4\53\1\310\23\53\24\0\2\53\4\0\14\53\2\0"+
    "\1\121\15\53\1\311\12\53\24\0\2\53\4\0\14\53"+
    "\2\0\1\121\4\53\1\312\23\53\24\0\2\53\4\0"+
    "\14\53\2\0\1\121\4\53\1\313\23\53\24\0\2\53"+
    "\4\0\14\53\2\0\1\121\13\53\1\314\14\53\24\0"+
    "\2\53\4\0\14\53\2\0\1\121\23\53\1\315\4\53"+
    "\24\0\2\53\4\0\14\53\2\0\1\121\20\53\1\316"+
    "\7\53\24\0\2\53\4\0\14\53\2\0\1\121\15\53"+
    "\1\317\12\53\24\0\2\53\4\0\14\53\2\0\1\121"+
    "\10\53\1\320\17\53\24\0\2\53\4\0\14\53\2\0"+
    "\1\121\4\53\1\321\23\53\24\0\2\53\4\0\14\53"+
    "\2\0\1\121\16\53\1\322\11\53\24\0\2\53\4\0"+
    "\14\53\2\0\1\121\20\53\1\323\7\53\24\0\2\53"+
    "\4\0\14\53\2\0\1\121\23\53\1\324\4\53\24\0"+
    "\2\53\4\0\14\53\2\0\1\121\4\53\1\325\23\53"+
    "\24\0\2\53\4\0\14\53\2\0\1\121\1\326\27\53"+
    "\24\0\2\53\4\0\14\53\2\0\1\121\20\53\1\327"+
    "\7\53\24\0\2\53\4\0\14\53\2\0\1\121\22\53"+
    "\1\330\5\53\24\0\2\53\4\0\14\53\2\0\1\121"+
    "\16\53\1\331\11\53\24\0\2\53\4\0\14\53\2\0"+
    "\1\121\2\53\1\332\25\53\24\0\2\53\4\0\14\53"+
    "\2\0\1\121\4\53\1\333\23\53\24\0\2\53\4\0"+
    "\14\53\2\0\1\121\1\334\27\53\24\0\2\33\4\0"+
    "\14\33\2\0\1\105\20\33\1\335\7\33\24\0\2\33"+
    "\4\0\14\33\2\0\1\105\23\33\1\336\4\33\24\0"+
    "\2\33\4\0\14\33\2\0\1\105\22\33\1\337\5\33"+
    "\24\0\2\33\4\0\14\33\2\0\1\105\15\33\1\340"+
    "\12\33\24\0\2\33\4\0\14\33\2\0\1\105\16\33"+
    "\1\341\11\33\24\0\2\33\4\0\14\33\2\0\1\105"+
    "\3\33\1\342\24\33\24\0\2\33\4\0\14\33\2\0"+
    "\1\105\4\33\1\343\23\33\24\0\2\33\4\0\14\33"+
    "\2\0\1\105\6\33\1\344\21\33\24\0\2\33\4\0"+
    "\14\33\2\0\1\105\2\33\1\345\25\33\24\0\2\53"+
    "\4\0\14\53\2\0\1\121\1\346\27\53\24\0\2\53"+
    "\4\0\14\53\2\0\1\121\1\347\27\53\24\0\2\53"+
    "\4\0\14\53\2\0\1\121\16\53\1\350\11\53\24\0"+
    "\2\53\4\0\14\53\2\0\1\121\14\53\1\351\13\53"+
    "\24\0\2\53\4\0\14\53\2\0\1\121\24\53\1\352"+
    "\3\53\24\0\2\53\4\0\14\53\2\0\1\121\22\53"+
    "\1\353\5\53\24\0\2\53\4\0\14\53\2\0\1\121"+
    "\16\53\1\354\11\53\24\0\2\53\4\0\14\53\2\0"+
    "\1\121\2\53\1\355\25\53\24\0\2\53\4\0\14\53"+
    "\2\0\1\121\1\53\1\356\26\53\24\0\2\53\4\0"+
    "\14\53\2\0\1\121\15\53\1\357\12\53\24\0\2\53"+
    "\4\0\14\53\2\0\1\121\10\53\1\360\17\53\24\0"+
    "\2\53\4\0\14\53\2\0\1\121\14\53\1\361\13\53"+
    "\24\0\2\53\4\0\14\53\2\0\1\121\15\53\1\362"+
    "\12\53\24\0\2\53\4\0\14\53\2\0\1\121\10\53"+
    "\1\363\17\53\24\0\2\53\4\0\14\53\2\0\1\121"+
    "\20\53\1\364\7\53\24\0\2\53\4\0\14\53\2\0"+
    "\1\121\10\53\1\365\17\53\24\0\2\53\4\0\14\53"+
    "\2\0\1\121\15\53\1\366\12\53\24\0\2\53\4\0"+
    "\14\53\2\0\1\121\3\53\1\367\24\53\24\0\2\33"+
    "\4\0\14\33\2\0\1\105\23\33\1\370\4\33\24\0"+
    "\2\33\4\0\14\33\2\0\1\105\2\33\1\371\25\33"+
    "\24\0\2\33\4\0\14\33\2\0\1\105\1\372\27\33"+
    "\24\0\2\33\4\0\14\33\2\0\1\105\1\373\27\33"+
    "\24\0\2\33\4\0\14\33\2\0\1\105\21\33\1\374"+
    "\6\33\24\0\2\33\4\0\14\33\2\0\1\105\1\375"+
    "\15\33\1\376\11\33\24\0\2\33\4\0\14\33\2\0"+
    "\1\105\3\33\1\377\24\33\24\0\2\33\4\0\14\33"+
    "\2\0\1\105\10\33\1\u0100\17\33\24\0\2\33\4\0"+
    "\14\33\2\0\1\105\1\375\15\33\1\375\11\33\24\0"+
    "\2\53\4\0\14\53\2\0\1\121\15\53\1\u0101\12\53"+
    "\24\0\2\53\4\0\1\u0102\13\53\2\0\1\121\30\53"+
    "\24\0\2\53\4\0\14\53\2\0\1\121\4\53\1\u0103"+
    "\23\53\24\0\2\53\4\0\14\53\2\0\1\121\4\53"+
    "\1\u0104\23\53\24\0\2\53\4\0\14\53\2\0\1\121"+
    "\1\u0105\27\53\24\0\2\53\4\0\14\53\2\0\1\121"+
    "\4\53\1\u0106\23\53\24\0\2\53\4\0\14\53\2\0"+
    "\1\121\10\53\1\u0107\17\53\24\0\2\53\4\0\14\53"+
    "\2\0\1\121\3\53\1\u0108\24\53\24\0\2\53\4\0"+
    "\14\53\2\0\1\121\20\53\1\u0109\7\53\24\0\2\53"+
    "\4\0\14\53\2\0\1\121\4\53\1\u010a\23\53\24\0"+
    "\2\53\4\0\14\53\2\0\1\121\2\53\1\u010b\25\53"+
    "\24\0\2\53\4\0\14\53\2\0\1\121\22\53\1\u010c"+
    "\5\53\24\0\2\53\4\0\14\53\2\0\1\121\1\u010d"+
    "\27\53\24\0\2\53\4\0\14\53\2\0\1\121\17\53"+
    "\1\u010e\10\53\24\0\2\53\4\0\14\53\2\0\1\121"+
    "\22\53\1\u010f\5\53\24\0\2\53\4\0\14\53\2\0"+
    "\1\121\4\53\1\u0110\23\53\24\0\2\33\4\0\14\33"+
    "\2\0\1\105\2\33\1\u0111\25\33\24\0\2\33\4\0"+
    "\14\33\2\0\1\105\22\33\1\u0112\5\33\24\0\2\33"+
    "\4\0\14\33\2\0\1\105\20\33\1\u0113\7\33\24\0"+
    "\2\33\4\0\14\33\2\0\1\105\20\33\1\u0114\7\33"+
    "\24\0\2\33\4\0\14\33\2\0\1\105\21\33\1\375"+
    "\6\33\24\0\2\33\4\0\14\33\2\0\1\105\1\u0115"+
    "\27\33\24\0\2\33\4\0\14\33\2\0\1\105\3\33"+
    "\1\u0116\24\33\24\0\2\53\4\0\14\53\2\0\1\121"+
    "\16\53\1\u0117\11\53\24\0\2\53\4\0\1\53\1\u0118"+
    "\2\53\1\u0119\6\53\1\u011a\2\0\1\121\30\53\24\0"+
    "\2\53\4\0\14\53\2\0\1\121\15\53\1\u011b\12\53"+
    "\24\0\2\53\4\0\14\53\2\0\1\121\20\53\1\u011c"+
    "\7\53\24\0\2\53\4\0\14\53\2\0\1\121\20\53"+
    "\1\u011d\7\53\24\0\2\53\4\0\14\53\2\0\1\121"+
    "\21\53\1\u011e\6\53\24\0\2\53\4\0\14\53\2\0"+
    "\1\121\20\53\1\u011f\7\53\24\0\2\53\4\0\14\53"+
    "\2\0\1\121\4\53\1\u0120\23\53\24\0\2\53\4\0"+
    "\14\53\2\0\1\121\15\53\1\u0121\12\53\24\0\2\53"+
    "\4\0\14\53\2\0\1\121\10\53\1\u0122\17\53\24\0"+
    "\2\53\4\0\14\53\2\0\1\121\14\53\1\u0123\13\53"+
    "\24\0\2\53\4\0\14\53\2\0\1\121\21\53\1\u0124"+
    "\6\53\24\0\2\53\4\0\14\53\2\0\1\121\1\u0125"+
    "\27\53\24\0\2\53\4\0\14\53\2\0\1\121\4\53"+
    "\1\u0126\23\53\24\0\2\53\4\0\14\53\2\0\1\121"+
    "\20\53\1\u0127\7\53\24\0\2\33\4\0\14\33\2\0"+
    "\1\105\22\33\1\u0128\5\33\24\0\2\33\4\0\14\33"+
    "\2\0\1\105\16\33\1\u0129\11\33\24\0\2\33\4\0"+
    "\14\33\2\0\1\105\3\33\1\u012a\24\33\24\0\2\33"+
    "\4\0\14\33\2\0\1\105\1\376\15\33\1\376\11\33"+
    "\24\0\2\53\4\0\14\53\2\0\1\121\16\53\1\u012b"+
    "\11\53\24\0\2\53\4\0\14\53\2\0\1\121\15\53"+
    "\1\u012c\12\53\24\0\2\53\4\0\14\53\2\0\1\121"+
    "\4\53\1\u012d\23\53\24\0\2\53\4\0\14\53\2\0"+
    "\1\121\22\53\1\u012e\5\53\24\0\2\53\4\0\14\53"+
    "\2\0\1\121\22\53\1\u012f\5\53\24\0\2\53\4\0"+
    "\14\53\2\0\1\121\1\u0130\27\53\24\0\2\53\4\0"+
    "\14\53\2\0\1\121\16\53\1\u0131\11\53\24\0\2\53"+
    "\4\0\14\53\2\0\1\121\13\53\1\u0132\14\53\24\0"+
    "\2\53\4\0\14\53\2\0\1\121\16\53\1\u0133\11\53"+
    "\24\0\2\33\4\0\14\33\2\0\1\105\16\33\1\u0134"+
    "\11\33\24\0\2\33\4\0\14\33\2\0\1\105\20\33"+
    "\1\u0135\7\33\24\0\2\33\4\0\14\33\2\0\1\105"+
    "\4\33\1\u0136\23\33\24\0\2\53\4\0\14\53\2\0"+
    "\1\121\13\53\1\u0137\14\53\24\0\2\53\4\0\14\53"+
    "\2\0\1\121\22\53\1\u0138\5\53\24\0\2\53\4\0"+
    "\14\53\2\0\1\121\1\u0139\27\53\24\0\2\53\4\0"+
    "\14\53\2\0\1\121\1\u013a\27\53\24\0\2\53\4\0"+
    "\14\53\2\0\1\121\1\u013b\27\53\24\0\2\53\4\0"+
    "\14\53\2\0\1\121\20\53\1\u013c\7\53\24\0\2\33"+
    "\4\0\14\33\2\0\1\105\20\33\1\u013d\7\33\24\0"+
    "\2\33\4\0\14\33\2\0\1\105\21\33\1\u013e\6\33"+
    "\24\0\2\53\4\0\14\53\2\0\1\121\4\53\1\u013f"+
    "\23\53\24\0\2\53\4\0\14\53\2\0\1\121\4\53"+
    "\1\u0140\23\53\24\0\2\53\4\0\14\53\2\0\1\121"+
    "\13\53\1\u0141\14\53\24\0\2\53\4\0\14\53\2\0"+
    "\1\121\20\53\1\u0142\7\53\24\0\2\53\4\0\14\53"+
    "\2\0\1\121\20\53\1\u0143\7\53\24\0\2\53\4\0"+
    "\14\53\2\0\1\121\1\u0144\27\53\24\0\2\53\4\0"+
    "\14\53\2\0\1\121\20\53\1\u0145\7\53\24\0\2\53"+
    "\4\0\14\53\2\0\1\121\15\53\1\u0146\12\53\24\0"+
    "\2\53\4\0\14\53\2\0\1\121\16\53\1\u0147\11\53"+
    "\24\0\2\53\4\0\14\53\2\0\1\121\16\53\1\u0148"+
    "\11\53\2\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[16640];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** Error code for "Unknown internal scanner error". */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  /** Error code for "could not match input". */
  private static final int ZZ_NO_MATCH = 1;
  /** Error code for "pushback value was too large". */
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /**
   * Error messages for {@link #ZZ_UNKNOWN_ERROR}, {@link #ZZ_NO_MATCH}, and
   * {@link #ZZ_PUSHBACK_2BIG} respectively.
   */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\4\11\5\1\4\11\1\1\1\11\2\1\1\11"+
    "\2\1\2\11\1\1\1\11\11\1\2\11\21\1\1\11"+
    "\1\1\1\0\1\11\1\0\1\11\1\0\3\11\3\0"+
    "\1\11\1\1\1\0\43\1\1\11\1\0\336\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[328];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** Input device. */
  private java.io.Reader zzReader;

  /** Current state of the DFA. */
  private int zzState;

  /** Current lexical state. */
  private int zzLexicalState = YYINITIAL;

  /**
   * This buffer contains the current text to be matched and is the source of the {@link #yytext()}
   * string.
   */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** Text position at the last accepting state. */
  private int zzMarkedPos;

  /** Current text position in the buffer. */
  private int zzCurrentPos;

  /** Marks the beginning of the {@link #yytext()} string in the buffer. */
  private int zzStartRead;

  /** Marks the last character in the buffer, that has been read from input. */
  private int zzEndRead;

  /**
   * Whether the scanner is at the end of file.
   * @see #yyatEOF
   */
  private boolean zzAtEOF;

  /**
   * The number of occupied positions in {@link #zzBuffer} beyond {@link #zzEndRead}.
   *
   * <p>When a lead/high surrogate has been read from the input stream into the final
   * {@link #zzBuffer} position, this will have a value of 1; otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /** Number of newlines encountered up to the start of the matched text. */
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  private int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  private boolean zzEOFDone;

  /* user code: */

public int tabulaciones;
public static ArrayList<Simbolos> sim;

public void add(String nuevo) {
        boolean bandera = false;
        String a = nuevo;
       
        int numero = 0;
        if (sim.size() == 0) {
            Simbolos sim2 = new Simbolos();
            sim2.setCantidad(1);
            sim2.setValor(a);
            sim.add(sim2);
        } else {
            
            for (int x = 0; x < sim.size(); x++) {
                    
                Simbolos sim1 = sim.get(x);

                if (sim1.getValor().equals(a)) {
                    bandera = true;
                    numero = x;

                    x = sim.size();
                } else {
                    bandera = false;
                }
            }

            if (bandera == true) {
               
                Simbolos val = sim.get(numero);
                int n = val.getCantidad();
                n = n + 1;
                val.setCantidad(n);
                sim.remove(numero);
                sim.add(val);
                   
            } else {
              
                Simbolos sim2 = new Simbolos();
                sim2.setCantidad(1);
                sim2.setValor(a);
                sim.add(sim2);
            }
        }  
    }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  AnalizadorLexico(java.io.Reader in) {
      this.sim = new ArrayList<>();
    this.tabulaciones = 0;
    this.zzReader = in;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  /**
   * Refills the input buffer.
   *
   * @return {@code false} iff there was new input.
   * @exception java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead - zzStartRead);

      /* translate stored positions */
      zzEndRead -= zzStartRead;
      zzCurrentPos -= zzStartRead;
      zzMarkedPos -= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length * 2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException(
          "Reader returned 0 characters. See JFlex examples/zero-reader for a workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
        if (numRead == requested) { // We requested too few chars to encode a full Unicode character
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        } else {                    // There is room in the buffer for at least one more char
          int c = zzReader.read();  // Expecting to read a paired low surrogate char
          if (c == -1) {
            return true;
          } else {
            zzBuffer[zzEndRead++] = (char)c;
          }
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }


  /**
   * Closes the input reader.
   *
   * @throws java.io.IOException if the reader could not be closed.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true; // indicate end of file
    zzEndRead = zzStartRead; // invalidate buffer

    if (zzReader != null) {
      zzReader.close();
    }
  }


  /**
   * Resets the scanner to read from a new input stream.
   *
   * <p>Does not close the old reader.
   *
   * <p>All internal variables are reset, the old input stream <b>cannot</b> be reused (internal
   * buffer is discarded and lost). Lexical state is set to {@code ZZ_INITIAL}.
   *
   * <p>Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader The new input stream.
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzEOFDone = false;
    yyResetPosition();
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE) {
      zzBuffer = new char[ZZ_BUFFERSIZE];
    }
  }

  /**
   * Resets the input position.
   */
  private final void yyResetPosition() {
      zzAtBOL  = true;
      zzAtEOF  = false;
      zzCurrentPos = 0;
      zzMarkedPos = 0;
      zzStartRead = 0;
      zzEndRead = 0;
      zzFinalHighSurrogate = 0;
      yyline = 0;
      yycolumn = 0;
      yychar = 0L;
  }


  /**
   * Returns whether the scanner has reached the end of the reader it reads from.
   *
   * @return whether the scanner has reached EOF.
   */
  public final boolean yyatEOF() {
    return zzAtEOF;
  }


  /**
   * Returns the current lexical state.
   *
   * @return the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state.
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   *
   * @return the matched text.
   */
  public final String yytext() {
    return new String(zzBuffer, zzStartRead, zzMarkedPos-zzStartRead);
  }


  /**
   * Returns the character at the given position from the matched text.
   *
   * <p>It is equivalent to {@code yytext().charAt(pos)}, but faster.
   *
   * @param position the position of the character to fetch. A value from 0 to {@code yylength()-1}.
   *
   * @return the character at {@code position}.
   */
  public final char yycharat(int position) {
    return zzBuffer[zzStartRead + position];
  }


  /**
   * How many characters were matched.
   *
   * @return the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * <p>In a well-formed scanner (no or only correct usage of {@code yypushback(int)} and a
   * match-all fallback rule) this method will only be called with things that
   * "Can't Possibly Happen".
   *
   * <p>If this method is called, something is seriously wrong (e.g. a JFlex bug producing a faulty
   * scanner etc.).
   *
   * <p>Usual syntax/scanner level error handling should be done in error fallback rules.
   *
   * @param errorCode the code of the error message to display.
   */
  private static void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    } catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * <p>They will be read again by then next call of the scanning method.
   *
   * @param number the number of characters to be read again. This number must not be greater than
   *     {@link #yylength()}.
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
  yyclose();    }
  }




  /**
   * Resumes scanning until the next regular expression is matched, the end of input is encountered
   * or an I/O-Error occurs.
   *
   * @return the next token.
   * @exception java.io.IOException if any I/O-Error occurs.
   */
  @Override  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char[] zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is
        // (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof)
            zzPeek = false;
          else
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
          {   return new Symbol(sym.EOF);
 }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { System.err.println("Error Léxico \"" + yytext() + "\" ["+"LINEA: "+ (yyline+1) + ": COLUMNA"+ (yycolumn+1) + "]");
            }
            // fall through
          case 76: break;
          case 2:
            { this.tabulaciones++;
            }
            // fall through
          case 77: break;
          case 3:
            { this.add("FIN DE LINEA");
            }
            // fall through
          case 78: break;
          case 4:
            { System.out.print(yytext());
            }
            // fall through
          case 79: break;
          case 5:
            { //this.tabulacion = 0;
            }
            // fall through
          case 80: break;
          case 6:
            { this.add("MODULO");
            return new Symbol(sym.SIGNOS);
            }
            // fall through
          case 81: break;
          case 7:
            { this.add("PARENTESIS (");
            return new Symbol(sym.PARENTESIS1);
            }
            // fall through
          case 82: break;
          case 8:
            { this.add("PARENTESIS )");
            return new Symbol(sym.PARENTESIS2);
            }
            // fall through
          case 83: break;
          case 9:
            { this.add("MULTIPLICACION");
            return new Symbol(sym.MULTIPLICACION);
            }
            // fall through
          case 84: break;
          case 10:
            { this.add("SUMA");
           return new Symbol(sym.SUMA);
            }
            // fall through
          case 85: break;
          case 11:
            { this.add("COMA");
            return new Symbol(sym.COMA);
            }
            // fall through
          case 86: break;
          case 12:
            { this.add("RESTA");
            return new Symbol(sym.RESTA);
            }
            // fall through
          case 87: break;
          case 13:
            { this.add("PUNTO");
            return new Symbol(sym.SIGNOS);
            }
            // fall through
          case 88: break;
          case 14:
            { this.add("DIVISION");
            return new Symbol(sym.DIVISION);
            }
            // fall through
          case 89: break;
          case 15:
            { this.add("NUMEROS DECIMALES"); 
            return new Symbol(sym.NUMERO_DECIMAL);
            }
            // fall through
          case 90: break;
          case 16:
            { this.add("DOS PUNTOS");
            return new Symbol(sym.DOS_PUNTOS);
            }
            // fall through
          case 91: break;
          case 17:
            { this.add("MENOR QUE");
            return new Symbol(sym.SIGNOS);
            }
            // fall through
          case 92: break;
          case 18:
            { this.add("IGUAL");
            return new Symbol(sym.IGUAL);
            }
            // fall through
          case 93: break;
          case 19:
            { this.add("MAYOR QUE");
            return new Symbol(sym.SIGNOS);
            }
            // fall through
          case 94: break;
          case 20:
            { this.add("VARIABLE CLASE");
            return new Symbol(sym.VARIABLE_CLASE);
            }
            // fall through
          case 95: break;
          case 21:
            { this.add("CORCHETE 1");
           return new Symbol(sym.SIGNOS);
            }
            // fall through
          case 96: break;
          case 22:
            { this.add("CORCHETE 2");
            return new Symbol(sym.SIGNOS);
            }
            // fall through
          case 97: break;
          case 23:
            { this.add("TIPO BOOLEANO");
            }
            // fall through
          case 98: break;
          case 24:
            { this.add("VARIABLE"); 
            return new Symbol(sym.VARIABLE);
            }
            // fall through
          case 99: break;
          case 25:
            { this.add("DISTINTO QUE");
            return new Symbol(sym.SIGNOS);
            }
            // fall through
          case 100: break;
          case 26:
            { this.add("TIPO_DATO_CUP"); 
            return new Symbol(sym.CADENA);
            }
            // fall through
          case 101: break;
          case 27:
            { this.add("COMENTARIO");
            }
            // fall through
          case 102: break;
          case 28:
            { this.add("INCREMENTO");
            return new Symbol(sym.SIGNOS);
            }
            // fall through
          case 103: break;
          case 29:
            { this.add("DECREMENTO");
            return new Symbol(sym.SIGNOS);
            }
            // fall through
          case 104: break;
          case 30:
            { this.add("IGUAL QUE");
            return new Symbol(sym.SIGNOS);
            }
            // fall through
          case 105: break;
          case 31:
            { this.add("OR");
            return new Symbol(sym.SIGNOS);
            }
            // fall through
          case 106: break;
          case 32:
            { this.add("ERROR");
            }
            // fall through
          case 107: break;
          case 33:
            { this.add("IF");
            }
            // fall through
          case 108: break;
          case 34:
            { this.add("EXPONENTE");
            return new Symbol(sym.SIGNOS);
            }
            // fall through
          case 109: break;
          case 35:
            { this.add("NUMEROS REALES");
            }
            // fall through
          case 110: break;
          case 36:
            { this.add("AND");
            return new Symbol(sym.SIGNOS);
            }
            // fall through
          case 111: break;
          case 37:
            { this.add("PAR O IMPAR");
          return new Symbol(sym.TIPO_DATO);
            }
            // fall through
          case 112: break;
          case 38:
            { this.add("LEER");
            }
            // fall through
          case 113: break;
          case 39:
            { this.add("TIPO NULO");
            }
            // fall through
          case 114: break;
          case 40:
            { this.add("RAIZ");
            return new Symbol(sym.FUNCION_ESPECIAL);
            }
            // fall through
          case 115: break;
          case 41:
            { this.add("TIPO REAL");
            return new Symbol(sym.TIPO_DATO);
            }
            // fall through
          case 116: break;
          case 42:
            { this.add("SENO");
            return new Symbol(sym.FUNCION_ESPECIAL);
            }
            // fall through
          case 117: break;
          case 43:
            { this.add("SINO");
            }
            // fall through
          case 118: break;
          case 44:
            { this.add("CLASE");
            return new Symbol(sym.CLASE);
            }
            // fall through
          case 119: break;
          case 45:
            { this.add("DESDE"); 
            return new Symbol(sym.FUNCIONES_CLICLOS_ETC);
            }
            // fall through
          case 120: break;
          case 46:
            { this.add("FALSO");
            return new Symbol(sym.SIGNOS);
            }
            // fall through
          case 121: break;
          case 47:
            { this.add("HACER"); 
            return new Symbol(sym.FUNCIONES_CLICLOS_ETC);
            }
            // fall through
          case 122: break;
          case 48:
            { this.add("NUEVO");  
          return new Symbol(sym.FUNCIONES_CLICLOS_ETC);
            }
            // fall through
          case 123: break;
          case 49:
            { this.add("TIPO CADENA");
            return new Symbol(sym.TIPO_DATO);
            }
            // fall through
          case 124: break;
          case 50:
            { this.add("COSENO");
            return new Symbol(sym.FUNCION_ESPECIAL);
            }
            // fall through
          case 125: break;
          case 51:
            { this.add("TIPO ENTERO");
            return new Symbol(sym.TIPO_DATO);
            }
            // fall through
          case 126: break;
          case 52:
            { this.add("METODOS");
            return new Symbol(sym.METODOS);
            }
            // fall through
          case 127: break;
          case 53:
            { this.add("TIPO DE PROPIEDAD");
            return new Symbol(sym.TIPO_DE_METODOS);
            }
            // fall through
          case 128: break;
          case 54:
            { this.add("INCLUIR");
            return new Symbol(sym.FUNCIONES_CLICLOS_ETC);
            }
            // fall through
          case 129: break;
          case 55:
            { this.add("METODO EJECUTAR");
           return new Symbol(sym.EJECUTAR);
            }
            // fall through
          case 130: break;
          case 56:
            { this.add("ELIMINAR"); 
            return new Symbol(sym.FUNCIONES_CLICLOS_ETC);
            }
            // fall through
          case 131: break;
          case 57:
            { this.add("TIPO BOOLEANO ");
          return new Symbol(sym.TIPO_DATO);
            }
            // fall through
          case 132: break;
          case 58:
            { this.add("DEVOLVER"); 
            return new Symbol(sym.FUNCIONES_CLICLOS_ETC);
            }
            // fall through
          case 133: break;
          case 59:
            { this.add("ENCONCES");
            }
            // fall through
          case 134: break;
          case 60:
            { this.add("ESCRIBIR");
            }
            // fall through
          case 135: break;
          case 61:
            { this.add("EXTIENDE"); 
            return new Symbol(sym.FUNCIONES_CLICLOS_ETC);
            }
            // fall through
          case 136: break;
          case 62:
            { this.add("MIENTRAS"); 
            return new Symbol(sym.FUNCIONES_CLICLOS_ETC);
            }
            // fall through
          case 137: break;
          case 63:
            { this.add("TANGENTE");
            return new Symbol(sym.FUNCION_ESPECIAL);
            }
            // fall through
          case 138: break;
          case 64:
            { this.add("LOGARTIMO");
            return new Symbol(sym.FUNCION_ESPECIAL);
            }
            // fall through
          case 139: break;
          case 65:
            { this.add("PRINCIPAL"); 
            return new Symbol(sym.FUNCIONES_CLICLOS_ETC);
            }
            // fall through
          case 140: break;
          case 66:
            { this.add("VERDADERO");
           return new Symbol(sym.SIGNOS);
            }
            // fall through
          case 141: break;
          case 67:
            { this.add("DESTRUCTOR"); 
            return new Symbol(sym.FUNCIONES_CLICLOS_ETC);
            }
            // fall through
          case 142: break;
          case 68:
            { this.add("INSTANCIAR"); 
            return new Symbol(sym.FUNCIONES_CLICLOS_ETC);
            }
            // fall through
          case 143: break;
          case 69:
            { this.add("CONSTRUCTOR"); 
            return new Symbol(sym.TIPO_DATO);
            }
            // fall through
          case 144: break;
          case 70:
            { this.add("PROPIEDADES"); 
            return new Symbol(sym.PROPIEDADES);
            }
            // fall through
          case 145: break;
          case 71:
            { this.add("CADENA:REAL");
            return new Symbol(sym.FUNCION_ESPECIAL);
            }
            // fall through
          case 146: break;
          case 72:
            { this.add("DECREMAR"); 
            return new Symbol(sym.FUNCIONES_CLICLOS_ETC);
            }
            // fall through
          case 147: break;
          case 73:
            { this.add("INCREMENTAR"); 
            return new Symbol(sym.FUNCIONES_CLICLOS_ETC);
            }
            // fall through
          case 148: break;
          case 74:
            { this.add("CADENA:ENTERO");
            return new Symbol(sym.FUNCION_ESPECIAL);
            }
            // fall through
          case 149: break;
          case 75:
            { this.add("CADENA:BOOLEANO");
            return new Symbol(sym.FUNCION_ESPECIAL);
            }
            // fall through
          case 150: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }

  /**
   * Runs the scanner on input files.
   *
   * This is a standalone scanner, it will print any unmatched
   * text to System.out unchanged.
   *
   * @param argv   the command line, contains the filenames to run
   *               the scanner on.
   */
  public static void main(String[] argv) {
    if (argv.length == 0) {
      System.out.println("Usage : java AnalizadorLexico [ --encoding <name> ] <inputfile(s)>");
    }
    else {
      int firstFilePos = 0;
      String encodingName = "UTF-8";
      if (argv[0].equals("--encoding")) {
        firstFilePos = 2;
        encodingName = argv[1];
        try {
          // Side-effect: is encodingName valid?
          java.nio.charset.Charset.forName(encodingName);
        } catch (Exception e) {
          System.out.println("Invalid encoding '" + encodingName + "'");
          return;
        }
      }
      for (int i = firstFilePos; i < argv.length; i++) {
        AnalizadorLexico scanner = null;
        try {
          java.io.FileInputStream stream = new java.io.FileInputStream(argv[i]);
          java.io.Reader reader = new java.io.InputStreamReader(stream, encodingName);
          scanner = new AnalizadorLexico(reader);
          while ( !scanner.zzAtEOF ) scanner.next_token();
        }
        catch (java.io.FileNotFoundException e) {
          System.out.println("File not found : \""+argv[i]+"\"");
        }
        catch (java.io.IOException e) {
          System.out.println("IO error scanning file \""+argv[i]+"\"");
          System.out.println(e);
        }
        catch (Exception e) {
          System.out.println("Unexpected exception:");
          e.printStackTrace();
        }
      }
    }
  }


}

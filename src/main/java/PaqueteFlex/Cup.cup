package Principal;
import java_cup.runtime.Symbol;


/*NODOSTERMINALES*/
terminal CLASE, PROPIEDADES, METODOS;
terminal IF, ENTONCES, SINO;
terminal LEER, ESCRIBIR;
terminal DEVOLVER, CONSTRUCTOR, DESTRUCTOR, PRINCIPAL, INSTANCIAR, DESDE, MIENTRAS;
terminal INCREMENTO, DECREMENTO, HACER, EXTIENDE;
terminal PARENTESIS1, PARENTESIS2, COMA;
terminal IGUAL, AND, OR, DOS_PUNTOS;
terminal PUNTO_Y_COMA;
terminal VARIABLE, RAIZ;
terminal MENOS, PUNTO;
terminal VARIABLE_CLASE,ELIMINAR;
terminal TIPO_DATO,OPERADORES;
terminal SUMA, RESTA, MULTIPLICACION, DIVISION, EXPONENCIACION, MODULO;
terminal MENOR_QUE, MAYOR_QUE, DISTINTO_QUE, IGUAL_QUE, INCREMENTAR, DECREMENTAR;
terminal SENO, COSENO, TANGENTE, LOGARITMO, TIPO_DE_METODOS;
terminal CADENA_A_BOOLEANO, CADENA_A_REAL, CADENA_A_ENTERO, CADENA;
terminal SIGNOS, FUNCION_ESPECIAL, FUNCIONES_CLICLOS_ETC,COMENTARIO,SALTO_LINEA,EJECUTAR, NUMERO_DECIMAL;
terminal VERDADERO, FALSO, NEW;



/*NO TERMINALES*/
non terminal S;
non terminal CLASE_GENERAL, CLASE_PARTICULAR, VARIABLES_PROPIEDADES, VARIABLES_PROPIEDADES2;
non terminal PROPIEDAD_CLASE, METODO_CLASE, METODOS_PARTICULAR;
non terminal FINAL_DE_LINEA,SALTO,CODIGO_GENERAL,METODO_RETORNO, METODO_EJECUTAR;
non terminal METODO_CODIGO, METODO_SINCODIGO,OPERACION, ASIGNACION, SIGNO_MATE,CONCATENACION, LOGICO,LEER_ESCRIBIR;
non terminal DEVOLVER_METODO;
non terminal CONDICION, CODIGO_CONDICION, SINO_GENERAL;
non terminal CICLO_FOR, CICLO_DO_WHILE, DECLARAR_FOR;
non terminal INSTANCIAR_CLASE, FUNCIONES,VARIABLES,VARIABLE_REPETIDAS;
non terminal IGUAL_CLASE,METODOS_OBJETOS;

start with S;

/*INICIAMOS EN S*/
S ::= CLASE_GENERAL;

CLASE_GENERAL ::=          CLASE_PARTICULAR CLASE_GENERAL  
                           |CLASE_PARTICULAR ;

CLASE_PARTICULAR ::=       CLASE VARIABLE_CLASE                               /*Si solo hay una clase sin contenido*/
                           |CLASE VARIABLE_CLASE PROPIEDAD_CLASE METODO_CLASE /*Si hay una clase con propiedad y metodo*/
                           |CLASE VARIABLE_CLASE PROPIEDAD_CLASE              /*Si hay una clase solo con propiedad*/
                           |CLASE VARIABLE_CLASE METODO_CLASE
                           |CLASE TIPO_DATO                               
                           |CLASE TIPO_DATO PROPIEDAD_CLASE METODO_CLASE 
                           |CLASE TIPO_DATO PROPIEDAD_CLASE              
                           |CLASE TIPO_DATO METODO_CLASE
                            ;               

PROPIEDAD_CLASE ::=        PROPIEDADES TIPO_DE_METODOS DOS_PUNTOS
                           |PROPIEDADES TIPO_DE_METODOS DOS_PUNTOS VARIABLES_PROPIEDADES 
                           |PROPIEDADES TIPO_DE_METODOS DOS_PUNTOS VARIABLES_PROPIEDADES PROPIEDAD_CLASE
                           |PROPIEDADES TIPO_DE_METODOS DOS_PUNTOS PROPIEDAD_CLASE
                            ;
/*declaracion de variables con su tipo de dato: entero variable o entero variable1, variable2*/

VARIABLES_PROPIEDADES ::=   TIPO_DATO VARIABLE_REPETIDAS 
                           |TIPO_DATO VARIABLE_REPETIDAS VARIABLES_PROPIEDADES
                           ;
VARIABLE_REPETIDAS ::= VARIABLE
                       |VARIABLE COMA VARIABLE_REPETIDAS
                       ;


/*
No terminal, que indica los tipos de metodos, debe de
iniciar con el no terminal "Metodo" seguido del tipo de
metodo ["Publica"|"Publico"|"Privada"|"Privados"|"Protegidos"|"Protegidas"] seguido de
dos puntos ":", luego puede ser recursivo o contener metodos particulares simples o con 
recursividad
*/

METODO_CLASE ::=           METODOS TIPO_DE_METODOS DOS_PUNTOS METODOS_PARTICULAR  
                           |METODOS TIPO_DE_METODOS DOS_PUNTOS METODOS_PARTICULAR METODO_CLASE
                           |METODOS TIPO_DE_METODOS DOS_PUNTOS
                           ;
/*
Gramatica de un metodo en concreto, pueden ser metodos que retornen un valor
por lo tanto llevaran un tipo de dato en el inicio o no retornar un valor, por lo 
tanto debe de llevar un "ejecutar"|"Ejecutar" equivalente a un void
*/
          
                            /*Gramatica que indica el tipo de metodo*/   
                                                                                                     /*los valores que inician con un tipo de dato deben de retornar algun valor, los que tiene un ejecutar no*/
METODOS_PARTICULAR ::=      METODO_RETORNO {:System.out.println("metodo re 1");:}
                            |METODO_EJECUTAR
                            |METODO_RETORNO METODOS_PARTICULAR {:System.out.println("metodo re 2");:}
                            |METODO_EJECUTAR METODOS_PARTICULAR
                            ;

                            /*Gramatica para metodo que devuelve un valor*/

METODO_RETORNO ::=          TIPO_DATO VARIABLE PARENTESIS1 PARENTESIS2 DEVOLVER_METODO                                                                         
                            |TIPO_DATO VARIABLE PARENTESIS1 VARIABLES_PROPIEDADES2 PARENTESIS2 DEVOLVER_METODO   
                            |TIPO_DATO PARENTESIS1 PARENTESIS2 {:System.out.println("Entro constructor");:}
                            |TIPO_DATO VARIABLE PARENTESIS1 PARENTESIS2 CODIGO_GENERAL DEVOLVER_METODO                                                                         
                            |TIPO_DATO VARIABLE PARENTESIS1 VARIABLES_PROPIEDADES2 PARENTESIS2 CODIGO_GENERAL DEVOLVER_METODO   
                            |TIPO_DATO PARENTESIS1 PARENTESIS2 CODIGO_GENERAL {:System.out.println("Entro constructor");:}/*constructor*/
                            |TIPO_DATO PARENTESIS1 PARENTESIS2 CODIGO_GENERAL DEVOLVER_METODO
                            |TIPO_DATO PRINCIPAL PARENTESIS1 PARENTESIS2 CODIGO_GENERAL 
                            ;

DEVOLVER_METODO ::=         DEVOLVER OPERACION
                            |DEVOLVER CONCATENACION
                            |DEVOLVER METODOS_OBJETOS
                            ;

                            /*Gramatica para metodo que no necesita devolver un valor*/

METODO_EJECUTAR ::=        EJECUTAR VARIABLE PARENTESIS1 VARIABLES_PROPIEDADES2 PARENTESIS2                      
                           |EJECUTAR VARIABLE PARENTESIS1 PARENTESIS2
                           |EJECUTAR VARIABLE PARENTESIS1 VARIABLES_PROPIEDADES2 PARENTESIS2 CODIGO_GENERAL
                           |EJECUTAR VARIABLE PARENTESIS1 PARENTESIS2 CODIGO_GENERAL
                           ;
                    
                           /*Gramatica para distintas instrucciones de codigo general*/

CODIGO_GENERAL ::=         ASIGNACION
                           |LEER_ESCRIBIR
                           |LEER_ESCRIBIR CODIGO_GENERAL
                           |ASIGNACION CODIGO_GENERAL
                           |CONDICION
                           |CICLO_FOR
                           |INSTANCIAR_CLASE
                           ;

                           /*Declaracion de variables para codigo general*/

VARIABLES_PROPIEDADES2 ::= TIPO_DATO VARIABLE  
                           |TIPO_DATO VARIABLE COMA VARIABLES_PROPIEDADES2
                           |TIPO_DATO VARIABLE IGUAL OPERACION
                           ;

                            /*
                            Gramatica de alguna variable que se iguala a algo. var = operacion, var = cadena | cadena concatenada, var falso | vedadero
                            */

ASIGNACION ::=              VARIABLE IGUAL OPERACION
                            |VARIABLE IGUAL CONCATENACION
                            |VARIABLE IGUAL LOGICO
                            ;

LEER_ESCRIBIR ::=          ESCRIBIR OPERACION
                           |ESCRIBIR CONCATENACION
                           |LEER VARIABLE
                           ;
                             

LOGICO ::=                 VERDADERO /*Terminal "verdadero"*/
                           |FALSO   /*Terminal "falso"*/
                            ;

SIGNO_MATE ::=              SUMA                    /*Terminal "+"   */
                            |RESTA                  /*Terminal "-"   */
                            |MULTIPLICACION         /*Terminal "*"  */
                            |DIVISION               /*Terminal "/"  */
                            |MODULO                /*Terminal "%"  */
                            ;

CONCATENACION ::=           CADENA 
                            |CADENA COMA CONCATENACION
                            |CADENA COMA OPERACION
                            ;

/*
Gramatica para operaciones matematicas 
a+d-s/1+df-daf
2
fsf
*/                            

OPERACION  ::=              VARIABLE
                            |NUMERO_DECIMAL
                            |VARIABLE SIGNO_MATE OPERACION    
                            |NUMERO_DECIMAL SIGNO_MATE OPERACION
                            ;

/*
    CONDICIONES DEL IF
*/
CONDICION  ::=              IF CODIGO_CONDICION ENTONCES CODIGO_GENERAL DEVOLVER_METODO SINO
                            |IF CODIGO_CONDICION ENTONCES CODIGO_GENERAL SINO
                            |IF CODIGO_CONDICION ENTONCES DEVOLVER_METODO SINO
                            ;


CODIGO_CONDICION ::=        OPERACION
                            |VARIABLE SIGNOS NUMERO_DECIMAL
                            ;



CICLO_FOR    ::=           DESDE VARIABLES_PROPIEDADES2 MIENTRAS CODIGO_CONDICION INCREMENTAR NUMERO_DECIMAL HACER CODIGO_GENERAL
                           |HACER CODIGO_GENERAL MIENTRAS CODIGO_CONDICION CODIGO_GENERAL
                           |DESDE VARIABLES_PROPIEDADES2 MIENTRAS CODIGO_CONDICION INCREMENTAR NUMERO_DECIMAL HACER
                           |HACER CODIGO_GENERAL MIENTRAS CODIGO_CONDICION
                           ;

INSTANCIAR_CLASE ::=       VARIABLE_CLASE VARIABLE IGUAL NEW VARIABLE_CLASE PARENTESIS1 PARENTESIS2 CODIGO_GENERAL {:System.out.println("1");:}
                           |VARIABLE_CLASE VARIABLE IGUAL NEW VARIABLE_CLASE PARENTESIS1 PARENTESIS2 {:System.out.println("2");:}
                           |VARIABLE IGUAL NEW VARIABLE_CLASE PARENTESIS1 PARENTESIS2 CODIGO_GENERAL {:System.out.println("3");:}
                           |VARIABLE IGUAL NEW VARIABLE_CLASE PARENTESIS1 PARENTESIS2  {:System.out.println("4");:}
                           |VARIABLE IGUAL NEW TIPO_DATO PARENTESIS1 PARENTESIS2 CODIGO_GENERAL {:System.out.println("3");:}
                           |VARIABLE IGUAL NEW TIPO_DATO PARENTESIS1 PARENTESIS2  {:System.out.println("4");:}
                           ;

METODOS_OBJETOS ::=        VARIABLE SIGNOS VARIABLE PARENTESIS1 VARIABLE_REPETIDAS PARENTESIS2  /*metodo de un objeto*/
                           |VARIABLE SIGNOS PARENTESIS1 PARENTESIS2 /*llamar metodo*/ 
                           ;                            



